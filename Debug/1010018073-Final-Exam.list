
1010018073-Final-Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002140  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800880c  0800880c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008814  08008814  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800881c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000078  08008894  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08008894  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011458  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297b  00000000  00000000  00031543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00033ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b60  00000000  00000000  00034d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027922  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013042  00000000  00000000  0005d21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed6bb  00000000  00000000  0007025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e0  00000000  00000000  0015d918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00161bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066b4 	.word	0x080066b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080066b4 	.word	0x080066b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr, len, HAL_MAX_DELAY);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	68b9      	ldr	r1, [r7, #8]
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <_write+0x28>)
 80004dc:	f003 fdca 	bl	8004074 <HAL_UART_Transmit>
  return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000e8 	.word	0x200000e8

080004f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <HAL_UART_RxCpltCallback+0x28>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <HAL_UART_RxCpltCallback+0x2c>)
 8000500:	f005 f94e 	bl	80057a0 <ring_buffer_put>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	4904      	ldr	r1, [pc, #16]	; (8000518 <HAL_UART_RxCpltCallback+0x28>)
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_UART_RxCpltCallback+0x30>)
 800050a:	f003 fe3d 	bl	8004188 <HAL_UART_Receive_IT>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000018a 	.word	0x2000018a
 800051c:	20000170 	.word	0x20000170
 8000520:	200000e8 	.word	0x200000e8

08000524 <validacion>:

void validacion(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0

	printf("Validating\r\n");
 800052a:	4837      	ldr	r0, [pc, #220]	; (8000608 <validacion+0xe4>)
 800052c:	f005 fd1e 	bl	8005f6c <puts>
	uint8_t student_code[10] = "1010018073"; //guarda el codigo/cedula del estudiante
 8000530:	4a36      	ldr	r2, [pc, #216]	; (800060c <validacion+0xe8>)
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	ca07      	ldmia	r2, {r0, r1, r2}
 8000538:	c303      	stmia	r3!, {r0, r1}
 800053a:	801a      	strh	r2, [r3, #0]
	uint8_t sequence[10];

	for (uint8_t idx = 0; idx < 10; idx++) {
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	e009      	b.n	8000556 <validacion+0x32>
	  ring_buffer_get(&ring_buffer_uart_rx, &sequence[idx]);
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	463a      	mov	r2, r7
 8000546:	4413      	add	r3, r2
 8000548:	4619      	mov	r1, r3
 800054a:	4831      	ldr	r0, [pc, #196]	; (8000610 <validacion+0xec>)
 800054c:	f005 f965 	bl	800581a <ring_buffer_get>
	for (uint8_t idx = 0; idx < 10; idx++) {
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	3301      	adds	r3, #1
 8000554:	75fb      	strb	r3, [r7, #23]
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2b09      	cmp	r3, #9
 800055a:	d9f2      	bls.n	8000542 <validacion+0x1e>
	}

	if (memcmp(student_code, sequence, 10) == 0) { //compara el codigo con el que se ingresa
 800055c:	4639      	mov	r1, r7
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	220a      	movs	r2, #10
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fde1 	bl	800612c <memcmp>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d113      	bne.n	8000598 <validacion+0x74>
	  ssd1306_Fill(Black);
 8000570:	2000      	movs	r0, #0
 8000572:	f005 fa5f 	bl	8005a34 <ssd1306_Fill>
	  ssd1306_SetCursor(20, 20);
 8000576:	2114      	movs	r1, #20
 8000578:	2014      	movs	r0, #20
 800057a:	f005 fba9 	bl	8005cd0 <ssd1306_SetCursor>
	  ssd1306_WriteString("Success<3", Font_11x18, White); //si está bien ingresado aparece "success" en la pantalla durante 10 segundos
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <validacion+0xf0>)
 8000580:	2301      	movs	r3, #1
 8000582:	ca06      	ldmia	r2, {r1, r2}
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <validacion+0xf4>)
 8000586:	f005 fb7d 	bl	8005c84 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800058a:	f005 fa77 	bl	8005a7c <ssd1306_UpdateScreen>
	  HAL_Delay(10000);
 800058e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000592:	f000 fc4b 	bl	8000e2c <HAL_Delay>
		  ssd1306_WriteString("Failed:(", Font_11x18, White);
		  ssd1306_UpdateScreen();
		  HAL_Delay(10000);
	  }
	}
}
 8000596:	e033      	b.n	8000600 <validacion+0xdc>
	  fallos += 1;
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <validacion+0xf8>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <validacion+0xf8>)
 80005a2:	701a      	strb	r2, [r3, #0]
	  if (fallos == 3){ //si falla 3 veces aparece"bloqued" en la pantalla durante 30 segundos
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <validacion+0xf8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d116      	bne.n	80005da <validacion+0xb6>
		  ssd1306_Fill(Black);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f005 fa41 	bl	8005a34 <ssd1306_Fill>
		  ssd1306_SetCursor(20, 20);
 80005b2:	2114      	movs	r1, #20
 80005b4:	2014      	movs	r0, #20
 80005b6:	f005 fb8b 	bl	8005cd0 <ssd1306_SetCursor>
		  ssd1306_WriteString("Blocked:/", Font_11x18, White);
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <validacion+0xf0>)
 80005bc:	2301      	movs	r3, #1
 80005be:	ca06      	ldmia	r2, {r1, r2}
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <validacion+0xfc>)
 80005c2:	f005 fb5f 	bl	8005c84 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80005c6:	f005 fa59 	bl	8005a7c <ssd1306_UpdateScreen>
		  HAL_Delay(30000);
 80005ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80005ce:	f000 fc2d 	bl	8000e2c <HAL_Delay>
		  fallos = 0;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <validacion+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	e012      	b.n	8000600 <validacion+0xdc>
		  ssd1306_Fill(Black);
 80005da:	2000      	movs	r0, #0
 80005dc:	f005 fa2a 	bl	8005a34 <ssd1306_Fill>
		  ssd1306_SetCursor(20, 20);
 80005e0:	2114      	movs	r1, #20
 80005e2:	2014      	movs	r0, #20
 80005e4:	f005 fb74 	bl	8005cd0 <ssd1306_SetCursor>
		  ssd1306_WriteString("Failed:(", Font_11x18, White);
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <validacion+0xf0>)
 80005ea:	2301      	movs	r3, #1
 80005ec:	ca06      	ldmia	r2, {r1, r2}
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <validacion+0x100>)
 80005f0:	f005 fb48 	bl	8005c84 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80005f4:	f005 fa42 	bl	8005a7c <ssd1306_UpdateScreen>
		  HAL_Delay(10000);
 80005f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80005fc:	f000 fc16 	bl	8000e2c <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	080066cc 	.word	0x080066cc
 800060c:	080066fc 	.word	0x080066fc
 8000610:	20000170 	.word	0x20000170
 8000614:	2000000c 	.word	0x2000000c
 8000618:	080066d8 	.word	0x080066d8
 800061c:	2000017c 	.word	0x2000017c
 8000620:	080066e4 	.word	0x080066e4
 8000624:	080066f0 	.word	0x080066f0

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fb81 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f84f 	bl	80006d4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

   MX_GPIO_Init();
 8000636:	f000 f90f 	bl	8000858 <MX_GPIO_Init>
   MX_USART2_UART_Init();
 800063a:	f000 f8dd 	bl	80007f8 <MX_USART2_UART_Init>
   MX_I2C1_Init();
 800063e:	f000 f89b 	bl	8000778 <MX_I2C1_Init>
   /* USER CODE BEGIN 2 */
   ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 8000642:	2210      	movs	r2, #16
 8000644:	491b      	ldr	r1, [pc, #108]	; (80006b4 <main+0x8c>)
 8000646:	481c      	ldr	r0, [pc, #112]	; (80006b8 <main+0x90>)
 8000648:	f005 f88e 	bl	8005768 <ring_buffer_init>
   HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	491b      	ldr	r1, [pc, #108]	; (80006bc <main+0x94>)
 8000650:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x98>)
 8000652:	f003 fd99 	bl	8004188 <HAL_UART_Receive_IT>

   ssd1306_Init();
 8000656:	f005 f983 	bl	8005960 <ssd1306_Init>
   ssd1306_Fill(Black);
 800065a:	2000      	movs	r0, #0
 800065c:	f005 f9ea 	bl	8005a34 <ssd1306_Fill>
   ssd1306_SetCursor(6, 6);
 8000660:	2106      	movs	r1, #6
 8000662:	2006      	movs	r0, #6
 8000664:	f005 fb34 	bl	8005cd0 <ssd1306_SetCursor>
   ssd1306_WriteString("Waiting", Font_16x26, White);
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <main+0x9c>)
 800066a:	2301      	movs	r3, #1
 800066c:	ca06      	ldmia	r2, {r1, r2}
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <main+0xa0>)
 8000670:	f005 fb08 	bl	8005c84 <ssd1306_WriteString>
   ssd1306_UpdateScreen();
 8000674:	f005 fa02 	bl	8005a7c <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ssd1306_Fill(Black);
 8000678:	2000      	movs	r0, #0
 800067a:	f005 f9db 	bl	8005a34 <ssd1306_Fill>
	 ssd1306_SetCursor(20, 20);
 800067e:	2114      	movs	r1, #20
 8000680:	2014      	movs	r0, #20
 8000682:	f005 fb25 	bl	8005cd0 <ssd1306_SetCursor>
	 ssd1306_WriteString("Waiting...", Font_11x18, White);
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <main+0xa4>)
 8000688:	2301      	movs	r3, #1
 800068a:	ca06      	ldmia	r2, {r1, r2}
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0xa8>)
 800068e:	f005 faf9 	bl	8005c84 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 8000692:	f005 f9f3 	bl	8005a7c <ssd1306_UpdateScreen>
	 uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0x90>)
 8000698:	f005 f8e9 	bl	800586e <ring_buffer_size>
 800069c:	4603      	mov	r3, r0
 800069e:	80fb      	strh	r3, [r7, #6]

	 if (size != 0) {
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x82>
		 validacion();
 80006a6:	f7ff ff3d 	bl	8000524 <validacion>
	 }
	 HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fbbd 	bl	8000e2c <HAL_Delay>
  {
 80006b2:	e7e1      	b.n	8000678 <main+0x50>
 80006b4:	20000180 	.word	0x20000180
 80006b8:	20000170 	.word	0x20000170
 80006bc:	2000018a 	.word	0x2000018a
 80006c0:	200000e8 	.word	0x200000e8
 80006c4:	20000014 	.word	0x20000014
 80006c8:	08006708 	.word	0x08006708
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	08006710 	.word	0x08006710

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2244      	movs	r2, #68	; 0x44
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fd32 	bl	800614c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006fa:	f002 f95b 	bl	80029b4 <HAL_PWREx_ControlVoltageScaling>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000704:	f000 f90e 	bl	8000924 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2310      	movs	r3, #16
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071a:	2302      	movs	r3, #2
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000722:	230a      	movs	r3, #10
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f992 	bl	8002a60 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000742:	f000 f8ef 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fd5a 	bl	8003218 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076a:	f000 f8db 	bl	8000924 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3758      	adds	r7, #88	; 0x58
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	f000 febe 	bl	8001534 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 f8b1 	bl	8000924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C1_Init+0x74>)
 80007c6:	f002 f84f 	bl	8002868 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f8a8 	bl	8000924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C1_Init+0x74>)
 80007d8:	f002 f891 	bl	80028fe <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f89f 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000094 	.word	0x20000094
 80007f0:	40005400 	.word	0x40005400
 80007f4:	10909cec 	.word	0x10909cec

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	f003 fbcc 	bl	8003fd8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f86d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e8 	.word	0x200000e8
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a2a      	ldr	r2, [pc, #168]	; (800091c <MX_GPIO_Init+0xc4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <MX_GPIO_Init+0xc4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0xc4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 fe15 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008f2:	f000 fc5d 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f6:	2320      	movs	r3, #32
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f000 fc4e 	bl	80011b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	; 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2288      	movs	r2, #136	; 0x88
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f005 fbd7 	bl	800614c <memset>
  if(hi2c->Instance==I2C1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <HAL_I2C_MspInit+0xd0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d14b      	bne.n	8000a40 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fe53 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ffb0 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <HAL_I2C_MspInit+0xd8>)
 8000a04:	f000 fbd4 	bl	80011b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_I2C_MspInit+0xd4>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	201f      	movs	r0, #31
 8000a26:	f000 fb00 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a2a:	201f      	movs	r0, #31
 8000a2c:	f000 fb19 	bl	8001062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2020      	movs	r0, #32
 8000a36:	f000 faf8 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	f000 fb11 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	37b0      	adds	r7, #176	; 0xb0
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ac      	sub	sp, #176	; 0xb0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 fb69 	bl	800614c <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0xc0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d143      	bne.n	8000b0c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fde5 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ff42 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fb5a 	bl	80011b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2026      	movs	r0, #38	; 0x26
 8000b02:	f000 fa92 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b06:	2026      	movs	r0, #38	; 0x26
 8000b08:	f000 faab 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	37b0      	adds	r7, #176	; 0xb0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f940 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <I2C1_EV_IRQHandler+0x10>)
 8000b76:	f000 fe8d 	bl	8001894 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000094 	.word	0x20000094

08000b84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <I2C1_ER_IRQHandler+0x10>)
 8000b8a:	f000 fe9d 	bl	80018c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000094 	.word	0x20000094

08000b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <USART2_IRQHandler+0x10>)
 8000b9e:	f003 fb3f 	bl	8004220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000e8 	.word	0x200000e8

08000bac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00a      	b.n	8000bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	b2ca      	uxtb	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf0      	blt.n	8000bbe <_read+0x12>
  }

  return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f005 fab2 	bl	80061e8 <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20018000 	.word	0x20018000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	2000018c 	.word	0x2000018c
 8000cb8:	200006e8 	.word	0x200006e8

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff ffea 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f005 fa71 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fc89 	bl	8000628 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d24:	0800881c 	.word	0x0800881c
  ldr r2, =_sbss
 8000d28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d2c:	200006e8 	.word	0x200006e8

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_Init+0x3c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_Init+0x3c>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f962 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f80f 	bl	8000d74 <HAL_InitTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	e001      	b.n	8000d66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d62:	f7ff fde5 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d023      	beq.n	8000dd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_InitTick+0x70>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f96d 	bl	800107e <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10f      	bne.n	8000dca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d809      	bhi.n	8000dc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f937 	bl	800102a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_InitTick+0x74>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e007      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e001      	b.n	8000dd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000190 	.word	0x20000190

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000190 	.word	0x20000190

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2204      	movs	r2, #4
 80010b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e022      	b.n	8001106 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 020e 	bic.w	r2, r2, #14
 80010ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f003 021c 	and.w	r2, r3, #28
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2101      	movs	r1, #1
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d005      	beq.n	8001136 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2204      	movs	r2, #4
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e029      	b.n	800118a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 020e 	bic.w	r2, r2, #14
 8001144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f003 021c 	and.w	r2, r3, #28
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
    }
  }
  return status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a2:	b2db      	uxtb	r3, r3
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e17f      	b.n	80014c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8171 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_GPIO_Init+0x40>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b03      	cmp	r3, #3
 800125c:	d118      	bne.n	8001290 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80ac 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137a:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x242>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x338>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x33c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x340>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x344>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x348>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x34c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x22a>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013f2:	2300      	movs	r3, #0
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x350>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x350>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x350>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae78 	bne.w	80011c0 <HAL_GPIO_Init+0x10>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e08d      	b.n	8001662 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fa0c 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001584:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001594:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e006      	b.n	80015bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d108      	bne.n	80015d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	e007      	b.n	80015e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001608:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69d9      	ldr	r1, [r3, #28]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4603      	mov	r3, r0
 800167c:	817b      	strh	r3, [r7, #10]
 800167e:	460b      	mov	r3, r1
 8001680:	813b      	strh	r3, [r7, #8]
 8001682:	4613      	mov	r3, r2
 8001684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b20      	cmp	r3, #32
 8001690:	f040 80f9 	bne.w	8001886 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_I2C_Mem_Write+0x34>
 800169a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0ed      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Mem_Write+0x4e>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e0e6      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016c2:	f7ff fba7 	bl	8000e14 <HAL_GetTick>
 80016c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2319      	movs	r3, #25
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fe7e 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0d1      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2221      	movs	r2, #33	; 0x21
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800170c:	88f8      	ldrh	r0, [r7, #6]
 800170e:	893a      	ldrh	r2, [r7, #8]
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	4603      	mov	r3, r0
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fa67 	bl	8001bf0 <I2C_RequestMemoryWrite>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0a9      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d90e      	bls.n	800175c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	8979      	ldrh	r1, [r7, #10]
 800174c:	2300      	movs	r3, #0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fff7 	bl	8002748 <I2C_TransferConfig>
 800175a:	e00f      	b.n	800177c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	b2da      	uxtb	r2, r3
 800176c:	8979      	ldrh	r1, [r7, #10]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 ffe6 	bl	8002748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fe77 	bl	8002474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e07b      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d034      	beq.n	8001834 <HAL_I2C_Mem_Write+0x1c8>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d130      	bne.n	8001834 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fdfa 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04d      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d90e      	bls.n	8001814 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	b2da      	uxtb	r2, r3
 8001802:	8979      	ldrh	r1, [r7, #10]
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 ff9b 	bl	8002748 <I2C_TransferConfig>
 8001812:	e00f      	b.n	8001834 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001822:	b2da      	uxtb	r2, r3
 8001824:	8979      	ldrh	r1, [r7, #10]
 8001826:	2300      	movs	r3, #0
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 ff8a 	bl	8002748 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d19e      	bne.n	800177c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fe5d 	bl	8002502 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e01a      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2220      	movs	r2, #32
 8001858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_I2C_Mem_Write+0x224>)
 8001866:	400b      	ands	r3, r1
 8001868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001886:	2302      	movs	r3, #2
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	fe00e800 	.word	0xfe00e800

08001894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	68f9      	ldr	r1, [r7, #12]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
  }
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00f      	beq.n	800190a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0208 	orr.w	r2, r3, #8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001932:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0202 	orr.w	r2, r3, #2
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 030b 	and.w	r3, r3, #11
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800196e:	68f9      	ldr	r1, [r7, #12]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fbd7 	bl	8002124 <I2C_ITError>
  }
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
 80019b2:	4613      	mov	r3, r2
 80019b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <I2C_Slave_ISR_IT+0x24>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e0e1      	b.n	8001be6 <I2C_Slave_ISR_IT+0x1e8>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a3e:	6939      	ldr	r1, [r7, #16]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fa09 	bl	8001e58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d04b      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d046      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d128      	bne.n	8001ab6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b28      	cmp	r3, #40	; 0x28
 8001a6e:	d108      	bne.n	8001a82 <I2C_Slave_ISR_IT+0x84>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a76:	d104      	bne.n	8001a82 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fafe 	bl	800207c <I2C_ITListenCplt>
 8001a80:	e031      	b.n	8001ae6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b29      	cmp	r3, #41	; 0x29
 8001a8c:	d10e      	bne.n	8001aac <I2C_Slave_ISR_IT+0xae>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a94:	d00a      	beq.n	8001aac <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fc57 	bl	8002352 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f97b 	bl	8001da0 <I2C_ITSlaveSeqCplt>
 8001aaa:	e01c      	b.n	8001ae6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ab4:	e08f      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2210      	movs	r2, #16
 8001abc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <I2C_Slave_ISR_IT+0xda>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad6:	d17e      	bne.n	8001bd6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	4619      	mov	r1, r3
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fb20 	bl	8002124 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ae4:	e077      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1d8>
 8001ae6:	e076      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d02f      	beq.n	8001b52 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02a      	beq.n	8001b52 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d018      	beq.n	8001b38 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d14b      	bne.n	8001bda <I2C_Slave_ISR_IT+0x1dc>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b48:	d047      	beq.n	8001bda <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f928 	bl	8001da0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b50:	e043      	b.n	8001bda <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b66:	6939      	ldr	r1, [r7, #16]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f895 	bl	8001c98 <I2C_ITAddrCplt>
 8001b6e:	e035      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d030      	beq.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02b      	beq.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d018      	beq.n	8001bc0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bbe:	e00d      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc6:	d002      	beq.n	8001bce <I2C_Slave_ISR_IT+0x1d0>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f8e6 	bl	8001da0 <I2C_ITSlaveSeqCplt>
 8001bd4:	e002      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001bda:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	8979      	ldrh	r1, [r7, #10]
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <I2C_RequestMemoryWrite+0xa4>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 fd95 	bl	8002748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	69b9      	ldr	r1, [r7, #24]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fc26 	bl	8002474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e02c      	b.n	8001c8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
 8001c42:	e015      	b.n	8001c70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fc0c 	bl	8002474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e012      	b.n	8001c8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c66:	893b      	ldrh	r3, [r7, #8]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fbab 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	80002000 	.word	0x80002000

08001c98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001cae:	2b28      	cmp	r3, #40	; 0x28
 8001cb0:	d16a      	bne.n	8001d88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001cd0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cde:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001cec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d138      	bne.n	8001d68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	09db      	lsrs	r3, r3, #7
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	89bb      	ldrh	r3, [r7, #12]
 8001cfe:	4053      	eors	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f003 0306 	and.w	r3, r3, #6
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11c      	bne.n	8001d44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d13b      	bne.n	8001d98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d36:	89ba      	ldrh	r2, [r7, #12]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fe32 	bl	80019a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d42:	e029      	b.n	8001d98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fd2d 	bl	80027ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d5a:	89ba      	ldrh	r2, [r7, #12]
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fe20 	bl	80019a6 <HAL_I2C_AddrCallback>
}
 8001d66:	e017      	b.n	8001d98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fd1d 	bl	80027ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d7a:	89ba      	ldrh	r2, [r7, #12]
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fe10 	bl	80019a6 <HAL_I2C_AddrCallback>
}
 8001d86:	e007      	b.n	8001d98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e00c      	b.n	8001dee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b29      	cmp	r3, #41	; 0x29
 8001df8:	d112      	bne.n	8001e20 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2228      	movs	r2, #40	; 0x28
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2221      	movs	r2, #33	; 0x21
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fcce 	bl	80027ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fdb0 	bl	800197e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e1e:	e017      	b.n	8001e50 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b2a      	cmp	r3, #42	; 0x2a
 8001e2a:	d111      	bne.n	8001e50 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2228      	movs	r2, #40	; 0x28
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2222      	movs	r2, #34	; 0x22
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fcb5 	bl	80027ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fda1 	bl	8001992 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e74:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b21      	cmp	r3, #33	; 0x21
 8001e82:	d002      	beq.n	8001e8a <I2C_ITSlaveCplt+0x32>
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b29      	cmp	r3, #41	; 0x29
 8001e88:	d108      	bne.n	8001e9c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fc8c 	bl	80027ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2221      	movs	r2, #33	; 0x21
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9a:	e019      	b.n	8001ed0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b22      	cmp	r3, #34	; 0x22
 8001ea0:	d002      	beq.n	8001ea8 <I2C_ITSlaveCplt+0x50>
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea6:	d108      	bne.n	8001eba <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ea8:	f248 0102 	movw	r1, #32770	; 0x8002
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fc7d 	bl	80027ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2222      	movs	r2, #34	; 0x22
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	e00a      	b.n	8001ed0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b28      	cmp	r3, #40	; 0x28
 8001ebe:	d107      	bne.n	8001ed0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001ec0:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fc71 	bl	80027ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ede:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <I2C_ITSlaveCplt+0x21c>)
 8001eec:	400b      	ands	r3, r1
 8001eee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fa2e 	bl	8002352 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01f      	beq.n	8001f58 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f26:	e017      	b.n	8001f58 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8a4 	bl	8002124 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b28      	cmp	r3, #40	; 0x28
 8001fe6:	d141      	bne.n	800206c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f846 	bl	800207c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ff0:	e03c      	b.n	800206c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ffa:	d014      	beq.n	8002026 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fecf 	bl	8001da0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <I2C_ITSlaveCplt+0x220>)
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fccf 	bl	80019c2 <HAL_I2C_ListenCpltCallback>
}
 8002024:	e022      	b.n	800206c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b22      	cmp	r3, #34	; 0x22
 8002030:	d10e      	bne.n	8002050 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fca2 	bl	8001992 <HAL_I2C_SlaveRxCpltCallback>
}
 800204e:	e00d      	b.n	800206c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fc89 	bl	800197e <HAL_I2C_SlaveTxCpltCallback>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	fe00e800 	.word	0xfe00e800
 8002078:	ffff0000 	.word	0xffff0000

0800207c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <I2C_ITListenCplt+0xa4>)
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d022      	beq.n	80020f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fb55 	bl	80027ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fc55 	bl	80019c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	ffff0000 	.word	0xffff0000

08002124 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <I2C_ITError+0x1d4>)
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b28      	cmp	r3, #40	; 0x28
 800215a:	d005      	beq.n	8002168 <I2C_ITError+0x44>
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b29      	cmp	r3, #41	; 0x29
 8002160:	d002      	beq.n	8002168 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b2a      	cmp	r3, #42	; 0x2a
 8002166:	d10b      	bne.n	8002180 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002168:	2103      	movs	r1, #3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fb1e 	bl	80027ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2228      	movs	r2, #40	; 0x28
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a60      	ldr	r2, [pc, #384]	; (80022fc <I2C_ITError+0x1d8>)
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
 800217e:	e030      	b.n	80021e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002180:	f248 0103 	movw	r1, #32771	; 0x8003
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fb11 	bl	80027ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8e1 	bl	8002352 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b60      	cmp	r3, #96	; 0x60
 800219a:	d01f      	beq.n	80021dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d114      	bne.n	80021dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d109      	bne.n	80021d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d039      	beq.n	8002264 <I2C_ITError+0x140>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b11      	cmp	r3, #17
 80021f4:	d002      	beq.n	80021fc <I2C_ITError+0xd8>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b21      	cmp	r3, #33	; 0x21
 80021fa:	d133      	bne.n	8002264 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800220a:	d107      	bne.n	800221c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800221a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe ffb7 	bl	8001194 <HAL_DMA_GetState>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d017      	beq.n	800225c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	4a33      	ldr	r2, [pc, #204]	; (8002300 <I2C_ITError+0x1dc>)
 8002232:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ff66 	bl	8001112 <HAL_DMA_Abort_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d04d      	beq.n	80022e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002256:	4610      	mov	r0, r2
 8002258:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800225a:	e045      	b.n	80022e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f851 	bl	8002304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002262:	e041      	b.n	80022e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d039      	beq.n	80022e0 <I2C_ITError+0x1bc>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b12      	cmp	r3, #18
 8002270:	d002      	beq.n	8002278 <I2C_ITError+0x154>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b22      	cmp	r3, #34	; 0x22
 8002276:	d133      	bne.n	80022e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002286:	d107      	bne.n	8002298 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe ff79 	bl	8001194 <HAL_DMA_GetState>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d017      	beq.n	80022d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <I2C_ITError+0x1dc>)
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe ff28 	bl	8001112 <HAL_DMA_Abort_IT>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d011      	beq.n	80022ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d2:	4610      	mov	r0, r2
 80022d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022d6:	e009      	b.n	80022ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f813 	bl	8002304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022de:	e005      	b.n	80022ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f80f 	bl	8002304 <I2C_TreatErrorCallback>
  }
}
 80022e6:	e002      	b.n	80022ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022e8:	bf00      	nop
 80022ea:	e000      	b.n	80022ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022ec:	bf00      	nop
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	ffff0000 	.word	0xffff0000
 80022fc:	080019ff 	.word	0x080019ff
 8002300:	0800239b 	.word	0x0800239b

08002304 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b60      	cmp	r3, #96	; 0x60
 8002316:	d10e      	bne.n	8002336 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fb5b 	bl	80019ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002334:	e009      	b.n	800234a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fb46 	bl	80019d6 <HAL_I2C_ErrorCallback>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d103      	bne.n	8002370 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	619a      	str	r2, [r3, #24]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	2200      	movs	r2, #0
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7ff ff9b 	bl	8002304 <I2C_TreatErrorCallback>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e6:	e031      	b.n	800244c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d02d      	beq.n	800244c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f0:	f7fe fd10 	bl	8000e14 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d302      	bcc.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d122      	bne.n	800244c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4013      	ands	r3, r2
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	429a      	cmp	r2, r3
 8002422:	d113      	bne.n	800244c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e00f      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	429a      	cmp	r2, r3
 8002468:	d0be      	beq.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002480:	e033      	b.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f87e 	bl	8002588 <I2C_IsErrorOccurred>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e031      	b.n	80024fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d025      	beq.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe fcb9 	bl	8000e14 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d11a      	bne.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d013      	beq.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e007      	b.n	80024fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d1c4      	bne.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800250e:	e02f      	b.n	8002570 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f837 	bl	8002588 <I2C_IsErrorOccurred>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02d      	b.n	8002580 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002524:	f7fe fc76 	bl	8000e14 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d302      	bcc.n	800253a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11a      	bne.n	8002570 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d013      	beq.n	8002570 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d1c8      	bne.n	8002510 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d068      	beq.n	8002686 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025bc:	e049      	b.n	8002652 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d045      	beq.n	8002652 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7fe fc25 	bl	8000e14 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <I2C_IsErrorOccurred+0x54>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d13a      	bne.n	8002652 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fe:	d121      	bne.n	8002644 <I2C_IsErrorOccurred+0xbc>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002606:	d01d      	beq.n	8002644 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b20      	cmp	r3, #32
 800260c:	d01a      	beq.n	8002644 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800261e:	f7fe fbf9 	bl	8000e14 <HAL_GetTick>
 8002622:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002624:	e00e      	b.n	8002644 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002626:	f7fe fbf5 	bl	8000e14 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b19      	cmp	r3, #25
 8002632:	d907      	bls.n	8002644 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f043 0320 	orr.w	r3, r3, #32
 800263a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002642:	e006      	b.n	8002652 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b20      	cmp	r3, #32
 8002650:	d1e9      	bne.n	8002626 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b20      	cmp	r3, #32
 800265e:	d003      	beq.n	8002668 <I2C_IsErrorOccurred+0xe0>
 8002660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0aa      	beq.n	80025be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2220      	movs	r2, #32
 8002676:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01c      	beq.n	8002736 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff fe28 	bl	8002352 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <I2C_IsErrorOccurred+0x1bc>)
 800270e:	400b      	ands	r3, r1
 8002710:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800273a:	4618      	mov	r0, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	fe00e800 	.word	0xfe00e800

08002748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	4613      	mov	r3, r2
 8002758:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002760:	7a7b      	ldrb	r3, [r7, #9]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002768:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	4313      	orrs	r3, r2
 8002772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002776:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <I2C_TransferConfig+0x60>)
 8002788:	430b      	orrs	r3, r1
 800278a:	43db      	mvns	r3, r3
 800278c:	ea02 0103 	and.w	r1, r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	03ff63ff 	.word	0x03ff63ff

080027ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00f      	beq.n	80027e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80027cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027da:	2b28      	cmp	r3, #40	; 0x28
 80027dc:	d003      	beq.n	80027e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80027e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00f      	beq.n	8002810 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80027f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002804:	2b28      	cmp	r3, #40	; 0x28
 8002806:	d003      	beq.n	8002810 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800280e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da03      	bge.n	8002820 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800281e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d103      	bne.n	800282e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800282c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	2b20      	cmp	r3, #32
 8002832:	d103      	bne.n	800283c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d103      	bne.n	800284a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002848:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	d138      	bne.n	80028f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002888:	2302      	movs	r3, #2
 800288a:	e032      	b.n	80028f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d139      	bne.n	8002988 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800291e:	2302      	movs	r3, #2
 8002920:	e033      	b.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002950:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c2:	d130      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d038      	beq.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2232      	movs	r2, #50	; 0x32
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	e002      	b.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d102      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f2      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a20:	d110      	bne.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d007      	beq.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a3c:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40007000 	.word	0x40007000
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e3ca      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a72:	4b97      	ldr	r3, [pc, #604]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a7c:	4b94      	ldr	r3, [pc, #592]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80e4 	beq.w	8002c5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4a>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	f040 808b 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	f040 8087 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e3a2      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_RCC_OscConfig+0x7c>
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	e005      	b.n	8002ae8 <HAL_RCC_OscConfig+0x88>
 8002adc:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d223      	bcs.n	8002b34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fd55 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e383      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b00:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a72      	ldr	r2, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	496d      	ldr	r1, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4968      	ldr	r1, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e025      	b.n	8002b80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4960      	ldr	r1, [pc, #384]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	495b      	ldr	r1, [pc, #364]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fd15 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e343      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 fc4a 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	4950      	ldr	r1, [pc, #320]	; (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a4e      	ldr	r2, [pc, #312]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b4e      	ldr	r3, [pc, #312]	; (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f8e5 	bl	8000d74 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d052      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	e327      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d032      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe f922 	bl	8000e14 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd4:	f7fe f91e 	bl	8000e14 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e310      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be6:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf2:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b34      	ldr	r3, [pc, #208]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4931      	ldr	r1, [pc, #196]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	492c      	ldr	r1, [pc, #176]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e01a      	b.n	8002c5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c32:	f7fe f8ef 	bl	8000e14 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3a:	f7fe f8eb 	bl	8000e14 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e2dd      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1da>
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d074      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x21a>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d10e      	bne.n	8002c92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d064      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d160      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e2ba      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x24a>
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e026      	b.n	8002cf8 <HAL_RCC_OscConfig+0x298>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb2:	d115      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x280>
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a02      	ldr	r2, [pc, #8]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x298>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	0800671c 	.word	0x0800671c
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	4ba0      	ldr	r3, [pc, #640]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a9f      	ldr	r2, [pc, #636]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b9d      	ldr	r3, [pc, #628]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a9c      	ldr	r2, [pc, #624]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f888 	bl	8000e14 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe f884 	bl	8000e14 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e276      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2a8>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f874 	bl	8000e14 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe f870 	bl	8000e14 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e262      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d42:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d0>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d060      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_OscConfig+0x310>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d116      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x328>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e23f      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4973      	ldr	r1, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	e040      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe f82f 	bl	8000e14 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe f82b 	bl	8000e14 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e21d      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dcc:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	495f      	ldr	r1, [pc, #380]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e018      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5c      	ldr	r2, [pc, #368]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe f80b 	bl	8000e14 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe f807 	bl	8000e14 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1f9      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e34:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fd ffe6 	bl	8000e14 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fd ffe2 	bl	8000e14 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1d4      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
 8002e6c:	e01b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fd ffc9 	bl	8000e14 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fd ffc5 	bl	8000e14 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1b7      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ef      	bne.n	8002e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a6 	beq.w	8003000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d118      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef8:	f7fd ff8c 	bl	8000e14 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fd ff88 	bl	8000e14 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e17a      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4d8>
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f36:	e029      	b.n	8002f8c <HAL_RCC_OscConfig+0x52c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d115      	bne.n	8002f6c <HAL_RCC_OscConfig+0x50c>
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x52c>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	4b9c      	ldr	r3, [pc, #624]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a9b      	ldr	r2, [pc, #620]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	4b98      	ldr	r3, [pc, #608]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4a97      	ldr	r2, [pc, #604]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fd ff3e 	bl	8000e14 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fd ff3a 	bl	8000e14 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e12a      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ed      	beq.n	8002f9c <HAL_RCC_OscConfig+0x53c>
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fd ff27 	bl	8000e14 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd ff23 	bl	8000e14 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e113      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe0:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ed      	bne.n	8002fca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a79      	ldr	r2, [pc, #484]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80fe 	beq.w	8003206 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 80d0 	bne.w	80031b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003014:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	d130      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	3b01      	subs	r3, #1
 8003034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d127      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11f      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003054:	2a07      	cmp	r2, #7
 8003056:	bf14      	ite	ne
 8003058:	2201      	movne	r2, #1
 800305a:	2200      	moveq	r2, #0
 800305c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305e:	4293      	cmp	r3, r2
 8003060:	d113      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d109      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d06e      	beq.n	8003168 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d069      	beq.n	8003164 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0ad      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80030b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b8:	f7fd feac 	bl	8000e14 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fd fea8 	bl	8000e14 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e09a      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030de:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x784>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f8:	0212      	lsls	r2, r2, #8
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	3a01      	subs	r2, #1
 8003104:	0552      	lsls	r2, r2, #21
 8003106:	4311      	orrs	r1, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800310c:	0852      	lsrs	r2, r2, #1
 800310e:	3a01      	subs	r2, #1
 8003110:	0652      	lsls	r2, r2, #25
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003118:	0912      	lsrs	r2, r2, #4
 800311a:	0452      	lsls	r2, r2, #17
 800311c:	430a      	orrs	r2, r1
 800311e:	4930      	ldr	r1, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800313c:	f7fd fe6a 	bl	8000e14 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fe66 	bl	8000e14 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e058      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003162:	e050      	b.n	8003206 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e04f      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d148      	bne.n	8003206 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a19      	ldr	r2, [pc, #100]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318c:	f7fd fe42 	bl	8000e14 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd fe3e 	bl	8000e14 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e030      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x734>
 80031b2:	e028      	b.n	8003206 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d023      	beq.n	8003202 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x780>)
 80031c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fd fe25 	bl	8000e14 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	e00c      	b.n	80031e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fd fe21 	bl	8000e14 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d905      	bls.n	80031e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e013      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x7b0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ec      	bne.n	80031ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x7b0>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4905      	ldr	r1, [pc, #20]	; (8003210 <HAL_RCC_OscConfig+0x7b0>)
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x7b4>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
 8003200:	e001      	b.n	8003206 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	feeefffc 	.word	0xfeeefffc

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0e7      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4970      	ldr	r1, [pc, #448]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b6e      	ldr	r3, [pc, #440]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cf      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	429a      	cmp	r2, r3
 8003276:	d908      	bls.n	800328a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4960      	ldr	r1, [pc, #384]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04c      	beq.n	8003330 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0a6      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e09a      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ce:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e08e      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e086      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4943      	ldr	r1, [pc, #268]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fd fd88 	bl	8000e14 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd fd84 	bl	8000e14 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06e      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003348:	429a      	cmp	r2, r3
 800334a:	d208      	bcs.n	800335e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	492b      	ldr	r1, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d210      	bcs.n	800338e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 0207 	bic.w	r2, r3, #7
 8003374:	4923      	ldr	r1, [pc, #140]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d001      	beq.n	800338e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e036      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4918      	ldr	r1, [pc, #96]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033cc:	f000 f824 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	490b      	ldr	r1, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1f4>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1fc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fcbf 	bl	8000d74 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033fa:	7afb      	ldrb	r3, [r7, #11]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	0800671c 	.word	0x0800671c
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d121      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d11e      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e005      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d102      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_GetSysClockFreq+0x110>)
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e004      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_RCC_GetSysClockFreq+0x114>)
 800349e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d134      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0xa6>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d003      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xac>
 80034bc:	e005      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_RCC_GetSysClockFreq+0x110>)
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	e005      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_GetSysClockFreq+0x114>)
 80034c6:	617b      	str	r3, [r7, #20]
      break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	617b      	str	r3, [r7, #20]
      break;
 80034ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	3301      	adds	r3, #1
 80034dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	fb03 f202 	mul.w	r2, r3, r2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	0e5b      	lsrs	r3, r3, #25
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	3301      	adds	r3, #1
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003510:	69bb      	ldr	r3, [r7, #24]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	08006734 	.word	0x08006734
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	0800672c 	.word	0x0800672c

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003578:	f7ff ffda 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0adb      	lsrs	r3, r3, #11
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCC_GetPCLK2Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	0800672c 	.word	0x0800672c

080035a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035ac:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035b8:	f7ff f9ee 	bl	8002998 <HAL_PWREx_GetVoltageRange>
 80035bc:	6178      	str	r0, [r7, #20]
 80035be:	e014      	b.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	4a24      	ldr	r2, [pc, #144]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
 80035cc:	4b22      	ldr	r3, [pc, #136]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035d8:	f7ff f9de 	bl	8002998 <HAL_PWREx_GetVoltageRange>
 80035dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f0:	d10b      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d919      	bls.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2ba0      	cmp	r3, #160	; 0xa0
 80035fc:	d902      	bls.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035fe:	2302      	movs	r3, #2
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e013      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003604:	2301      	movs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e010      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d902      	bls.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003610:	2303      	movs	r3, #3
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e00a      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d102      	bne.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800361c:	2302      	movs	r3, #2
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	e004      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b70      	cmp	r3, #112	; 0x70
 8003626:	d101      	bne.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003628:	2301      	movs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 0207 	bic.w	r2, r3, #7
 8003634:	4909      	ldr	r1, [pc, #36]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	40022000 	.word	0x40022000

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003668:	2300      	movs	r3, #0
 800366a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800366c:	2300      	movs	r3, #0
 800366e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003678:	2b00      	cmp	r3, #0
 800367a:	d041      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003680:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003684:	d02a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800368a:	d824      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800368c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003696:	d81e      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d010      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036a2:	e018      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a4:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a85      	ldr	r2, [pc, #532]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b0:	e015      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fabb 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c2:	e00c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3320      	adds	r3, #32
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fba6 	bl	8003e1c <RCCEx_PLLSAI2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036d4:	e003      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	74fb      	strb	r3, [r7, #19]
      break;
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e4:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f2:	4973      	ldr	r1, [pc, #460]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036fa:	e001      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d041      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003714:	d02a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800371a:	d824      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800371c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003726:	d81e      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003730:	d010      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003732:	e018      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003734:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003740:	e015      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa73 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003752:	e00c      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3320      	adds	r3, #32
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fb5e 	bl	8003e1c <RCCEx_PLLSAI2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	74fb      	strb	r3, [r7, #19]
      break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800376c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003774:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003782:	494f      	ldr	r1, [pc, #316]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800378a:	e001      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a0 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
 80037c4:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d0:	2301      	movs	r3, #1
 80037d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d4:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3a      	ldr	r2, [pc, #232]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e0:	f7fd fb18 	bl	8000e14 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037e6:	e009      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fd fb14 	bl	8000e14 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	74fb      	strb	r3, [r7, #19]
        break;
 80037fa:	e005      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ef      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d15c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003818:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d019      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd fad3 	bl	8000e14 <HAL_GetTick>
 800386e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003870:	e00b      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd facf 	bl	8000e14 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d902      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	74fb      	strb	r3, [r7, #19]
            break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ec      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ae:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038b6:	e009      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038cc:	7c7b      	ldrb	r3, [r7, #17]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d2:	4b9e      	ldr	r3, [pc, #632]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	4a9d      	ldr	r2, [pc, #628]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ea:	4b98      	ldr	r3, [pc, #608]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f023 0203 	bic.w	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	4994      	ldr	r1, [pc, #592]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800390c:	4b8f      	ldr	r3, [pc, #572]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 020c 	bic.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	498c      	ldr	r1, [pc, #560]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800392e:	4b87      	ldr	r3, [pc, #540]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	4983      	ldr	r1, [pc, #524]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003950:	4b7e      	ldr	r3, [pc, #504]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	497b      	ldr	r1, [pc, #492]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003980:	4972      	ldr	r1, [pc, #456]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003994:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	496a      	ldr	r1, [pc, #424]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	4961      	ldr	r1, [pc, #388]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d8:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	4959      	ldr	r1, [pc, #356]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	4950      	ldr	r1, [pc, #320]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	4948      	ldr	r1, [pc, #288]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a3e:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	493f      	ldr	r1, [pc, #252]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d028      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a60:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	4937      	ldr	r1, [pc, #220]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a31      	ldr	r2, [pc, #196]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8a:	60d3      	str	r3, [r2, #12]
 8003a8c:	e011      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f8c8 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	491f      	ldr	r1, [pc, #124]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003adc:	d106      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae8:	60d3      	str	r3, [r2, #12]
 8003aea:	e011      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f899 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02b      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a02      	ldr	r2, [pc, #8]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
 8003b48:	e014      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f867 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02f      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b80:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8e:	4928      	ldr	r1, [pc, #160]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f844 	bl	8003c34 <RCCEx_PLLSAI1_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d014      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
 8003bba:	e011      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3320      	adds	r3, #32
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f925 	bl	8003e1c <RCCEx_PLLSAI2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1e:	4904      	ldr	r1, [pc, #16]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000

08003c34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c42:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d018      	beq.n	8003c80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0203 	and.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d10d      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
       ||
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c66:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
       ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d047      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e044      	b.n	8003d0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d018      	beq.n	8003cba <RCCEx_PLLSAI1_Config+0x86>
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d825      	bhi.n	8003cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d002      	beq.n	8003c96 <RCCEx_PLLSAI1_Config+0x62>
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d009      	beq.n	8003ca8 <RCCEx_PLLSAI1_Config+0x74>
 8003c94:	e020      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c96:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11d      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca6:	e01a      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca8:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d116      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb8:	e013      	b.n	8003ce2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cba:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cd6:	e006      	b.n	8003ce6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e004      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	430b      	orrs	r3, r1
 8003d04:	4944      	ldr	r1, [pc, #272]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d17d      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd f87a 	bl	8000e14 <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d22:	e009      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d24:	f7fd f876 	bl	8000e14 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d902      	bls.n	8003d38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	73fb      	strb	r3, [r7, #15]
        break;
 8003d36:	e005      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ef      	bne.n	8003d24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d160      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d111      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6892      	ldr	r2, [r2, #8]
 8003d60:	0211      	lsls	r1, r2, #8
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0912      	lsrs	r2, r2, #4
 8003d68:	0452      	lsls	r2, r2, #17
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	492a      	ldr	r1, [pc, #168]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]
 8003d72:	e027      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d112      	bne.n	8003da0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6892      	ldr	r2, [r2, #8]
 8003d8a:	0211      	lsls	r1, r2, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6912      	ldr	r2, [r2, #16]
 8003d90:	0852      	lsrs	r2, r2, #1
 8003d92:	3a01      	subs	r2, #1
 8003d94:	0552      	lsls	r2, r2, #21
 8003d96:	430a      	orrs	r2, r1
 8003d98:	491f      	ldr	r1, [pc, #124]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
 8003d9e:	e011      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6952      	ldr	r2, [r2, #20]
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0652      	lsls	r2, r2, #25
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	4916      	ldr	r1, [pc, #88]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd f820 	bl	8000e14 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dd6:	e009      	b.n	8003dec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dd8:	f7fd f81c 	bl	8000e14 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dea:	e005      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4904      	ldr	r1, [pc, #16]	; (8003e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000

08003e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d018      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e36:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0203 	and.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d10d      	bne.n	8003e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
       ||
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e4e:	4b61      	ldr	r3, [pc, #388]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d047      	beq.n	8003ef2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e044      	b.n	8003ef2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d018      	beq.n	8003ea2 <RCCEx_PLLSAI2_Config+0x86>
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d825      	bhi.n	8003ec0 <RCCEx_PLLSAI2_Config+0xa4>
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d002      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0x62>
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d009      	beq.n	8003e90 <RCCEx_PLLSAI2_Config+0x74>
 8003e7c:	e020      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e7e:	4b55      	ldr	r3, [pc, #340]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11d      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8e:	e01a      	b.n	8003ec6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d116      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea0:	e013      	b.n	8003eca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ea2:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eae:	4b49      	ldr	r3, [pc, #292]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ebe:	e006      	b.n	8003ece <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec4:	e004      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6819      	ldr	r1, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	430b      	orrs	r3, r1
 8003eec:	4939      	ldr	r1, [pc, #228]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d167      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a35      	ldr	r2, [pc, #212]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fc ff86 	bl	8000e14 <HAL_GetTick>
 8003f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f0a:	e009      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f0c:	f7fc ff82 	bl	8000e14 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1e:	e005      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f20:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ef      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d14a      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f38:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	0211      	lsls	r1, r2, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	0912      	lsrs	r2, r2, #4
 8003f50:	0452      	lsls	r2, r2, #17
 8003f52:	430a      	orrs	r2, r1
 8003f54:	491f      	ldr	r1, [pc, #124]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	614b      	str	r3, [r1, #20]
 8003f5a:	e011      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6892      	ldr	r2, [r2, #8]
 8003f6c:	0211      	lsls	r1, r2, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6912      	ldr	r2, [r2, #16]
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0652      	lsls	r2, r2, #25
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	4916      	ldr	r1, [pc, #88]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fc ff42 	bl	8000e14 <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f92:	e009      	b.n	8003fa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f94:	f7fc ff3e 	bl	8000e14 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d902      	bls.n	8003fa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fa6:	e005      	b.n	8003fb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ef      	beq.n	8003f94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4904      	ldr	r1, [pc, #16]	; (8003fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e040      	b.n	800406c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fd2a 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fec0 	bl	8004da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fc05 	bl	8004834 <UART_SetConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e01b      	b.n	800406c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 ff3f 	bl	8004ee8 <UART_CheckIdleState>
 800406a:	4603      	mov	r3, r0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	2b20      	cmp	r3, #32
 800408a:	d178      	bne.n	800417e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Transmit+0x24>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e071      	b.n	8004180 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2221      	movs	r2, #33	; 0x21
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040aa:	f7fc feb3 	bl	8000e14 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d108      	bne.n	80040dc <HAL_UART_Transmit+0x68>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e003      	b.n	80040e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040e4:	e030      	b.n	8004148 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 ffa1 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e03c      	b.n	8004180 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004118:	b292      	uxth	r2, r2
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3302      	adds	r3, #2
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e008      	b.n	8004136 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b292      	uxth	r2, r2
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3301      	adds	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1c8      	bne.n	80040e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 ff6a 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e005      	b.n	8004180 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419c:	2b20      	cmp	r3, #32
 800419e:	d137      	bne.n	8004210 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Receive_IT+0x24>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e030      	b.n	8004212 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_UART_Receive_IT+0x94>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01f      	beq.n	8004200 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	461a      	mov	r2, r3
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 ff7e 	bl	8005108 <UART_Start_Receive_IT>
 800420c:	4603      	mov	r3, r0
 800420e:	e000      	b.n	8004212 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	; 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40008000 	.word	0x40008000

08004220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b0ba      	sub	sp, #232	; 0xe8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800424a:	f640 030f 	movw	r3, #2063	; 0x80f
 800424e:	4013      	ands	r3, r2
 8004250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d115      	bne.n	8004288 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00f      	beq.n	8004288 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 82ae 	beq.w	80047da <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
      }
      return;
 8004286:	e2a8      	b.n	80047da <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8117 	beq.w	80044c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800429e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042a2:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_UART_IRQHandler+0x298>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 810a 	beq.w	80044c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <HAL_UART_IRQHandler+0xbc>
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d011      	beq.n	800430c <HAL_UART_IRQHandler+0xec>
 80042e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2202      	movs	r2, #2
 80042fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d011      	beq.n	800433c <HAL_UART_IRQHandler+0x11c>
 8004318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2204      	movs	r2, #4
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d017      	beq.n	8004378 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	f043 0208 	orr.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_UART_IRQHandler+0x18a>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8214 	beq.w	80047de <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04f      	beq.n	80044a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 ff46 	bl	8005294 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d141      	bne.n	800449a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3308      	adds	r3, #8
 800441c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800442c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800444e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800445a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1d9      	bne.n	8004416 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	2b00      	cmp	r3, #0
 8004468:	d013      	beq.n	8004492 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <HAL_UART_IRQHandler+0x29c>)
 8004470:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc fe4b 	bl	8001112 <HAL_DMA_Abort_IT>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e00f      	b.n	80044b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f9b8 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e00b      	b.n	80044b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9b4 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e007      	b.n	80044b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f9b0 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80044b0:	e195      	b.n	80047de <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b2:	bf00      	nop
    return;
 80044b4:	e193      	b.n	80047de <HAL_UART_IRQHandler+0x5be>
 80044b6:	bf00      	nop
 80044b8:	04000120 	.word	0x04000120
 80044bc:	0800535d 	.word	0x0800535d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 814e 	bne.w	8004766 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8147 	beq.w	8004766 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8140 	beq.w	8004766 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2210      	movs	r2, #16
 80044ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	f040 80b8 	bne.w	800466e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800450a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8167 	beq.w	80047e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800451a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800451e:	429a      	cmp	r2, r3
 8004520:	f080 815f 	bcs.w	80047e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800452a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 8086 	bne.w	800464c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800456a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800456e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1da      	bne.n	8004540 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800459a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e1      	bne.n	800458a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800462e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004630:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800463c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e4      	bne.n	800460c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc fd25 	bl	8001096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800465e:	b29b      	uxth	r3, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8d8 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800466c:	e0b9      	b.n	80047e2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467a:	b29b      	uxth	r3, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80ab 	beq.w	80047e6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
 80046be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e4      	bne.n	800469a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	623b      	str	r3, [r7, #32]
   return(result);
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046f4:	633a      	str	r2, [r7, #48]	; 0x30
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e3      	bne.n	80046d0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	60fb      	str	r3, [r7, #12]
   return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	617b      	str	r3, [r7, #20]
   return(result);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e4      	bne.n	800471c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f85c 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004764:	e03f      	b.n	80047e6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <HAL_UART_IRQHandler+0x570>
 8004772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 ffe3 	bl	8005754 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800478e:	e02d      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
    }
    return;
 80047b8:	e017      	b.n	80047ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d012      	beq.n	80047ec <HAL_UART_IRQHandler+0x5cc>
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fdd8 	bl	8005388 <UART_EndTransmit_IT>
    return;
 80047d8:	e008      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80047da:	bf00      	nop
 80047dc:	e006      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80047de:	bf00      	nop
 80047e0:	e004      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80047ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047ec:	37e8      	adds	r7, #232	; 0xe8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop

080047f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4ba4      	ldr	r3, [pc, #656]	; (8004af4 <UART_SetConfig+0x2c0>)
 8004864:	4013      	ands	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a99      	ldr	r2, [pc, #612]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	4313      	orrs	r3, r2
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a90      	ldr	r2, [pc, #576]	; (8004afc <UART_SetConfig+0x2c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d126      	bne.n	800490c <UART_SetConfig+0xd8>
 80048be:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <UART_SetConfig+0x2cc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d81b      	bhi.n	8004904 <UART_SetConfig+0xd0>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0xa0>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ea:	e116      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e112      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e10e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e10a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e106      	b.n	8004b1a <UART_SetConfig+0x2e6>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <UART_SetConfig+0x2d0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d138      	bne.n	8004988 <UART_SetConfig+0x154>
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d82d      	bhi.n	8004980 <UART_SetConfig+0x14c>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0xf8>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004981 	.word	0x08004981
 800493c:	08004971 	.word	0x08004971
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
 800494c:	08004969 	.word	0x08004969
 8004950:	08004981 	.word	0x08004981
 8004954:	08004981 	.word	0x08004981
 8004958:	08004981 	.word	0x08004981
 800495c:	08004979 	.word	0x08004979
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e0d8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e0d4      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e0d0      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e0cc      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e0c8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <UART_SetConfig+0x2d4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x1aa>
 8004992:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d016      	beq.n	80049ce <UART_SetConfig+0x19a>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d818      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d00a      	beq.n	80049be <UART_SetConfig+0x18a>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d814      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0x182>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d008      	beq.n	80049c6 <UART_SetConfig+0x192>
 80049b4:	e00f      	b.n	80049d6 <UART_SetConfig+0x1a2>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e0ad      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049be:	2302      	movs	r3, #2
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c4:	e0a9      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049c6:	2304      	movs	r3, #4
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049cc:	e0a5      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049ce:	2308      	movs	r3, #8
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d4:	e0a1      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049d6:	2310      	movs	r3, #16
 80049d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049dc:	e09d      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <UART_SetConfig+0x2d8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d125      	bne.n	8004a34 <UART_SetConfig+0x200>
 80049e8:	4b45      	ldr	r3, [pc, #276]	; (8004b00 <UART_SetConfig+0x2cc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d016      	beq.n	8004a24 <UART_SetConfig+0x1f0>
 80049f6:	2bc0      	cmp	r3, #192	; 0xc0
 80049f8:	d818      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d00a      	beq.n	8004a14 <UART_SetConfig+0x1e0>
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d814      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x1d8>
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d008      	beq.n	8004a1c <UART_SetConfig+0x1e8>
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x1f8>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e082      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e07e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e07a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e076      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e072      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a35      	ldr	r2, [pc, #212]	; (8004b10 <UART_SetConfig+0x2dc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d12a      	bne.n	8004a94 <UART_SetConfig+0x260>
 8004a3e:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d01a      	beq.n	8004a84 <UART_SetConfig+0x250>
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a52:	d81b      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d00c      	beq.n	8004a74 <UART_SetConfig+0x240>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d815      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <UART_SetConfig+0x238>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d008      	beq.n	8004a7c <UART_SetConfig+0x248>
 8004a6a:	e00f      	b.n	8004a8c <UART_SetConfig+0x258>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e052      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e04e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e04a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e046      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a92:	e042      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d13a      	bne.n	8004b14 <UART_SetConfig+0x2e0>
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aac:	d01a      	beq.n	8004ae4 <UART_SetConfig+0x2b0>
 8004aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab2:	d81b      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d00c      	beq.n	8004ad4 <UART_SetConfig+0x2a0>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d815      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <UART_SetConfig+0x298>
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac8:	d008      	beq.n	8004adc <UART_SetConfig+0x2a8>
 8004aca:	e00f      	b.n	8004aec <UART_SetConfig+0x2b8>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e022      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e01e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e01a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e016      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e012      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40008000 	.word	0x40008000
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40004400 	.word	0x40004400
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	40004c00 	.word	0x40004c00
 8004b10:	40005000 	.word	0x40005000
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a9f      	ldr	r2, [pc, #636]	; (8004d9c <UART_SetConfig+0x568>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d17a      	bne.n	8004c1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d824      	bhi.n	8004b76 <UART_SetConfig+0x342>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x300>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b77 	.word	0x08004b77
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004b67 	.word	0x08004b67
 8004b48:	08004b77 	.word	0x08004b77
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b77 	.word	0x08004b77
 8004b54:	08004b6f 	.word	0x08004b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fcf6 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <UART_SetConfig+0x56c>)
 8004b62:	61fb      	str	r3, [r7, #28]
        break;
 8004b64:	e00d      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fe fc57 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004b6a:	61f8      	str	r0, [r7, #28]
        break;
 8004b6c:	e009      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e005      	b.n	8004b82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80fb 	beq.w	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d305      	bcc.n	8004ba6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d903      	bls.n	8004bae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bac:	e0e8      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	022b      	lsls	r3, r5, #8
 8004bc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bc4:	0222      	lsls	r2, r4, #8
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6849      	ldr	r1, [r1, #4]
 8004bca:	0849      	lsrs	r1, r1, #1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	eb12 0a08 	adds.w	sl, r2, r8
 8004bd6:	eb43 0b09 	adc.w	fp, r3, r9
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	4650      	mov	r0, sl
 8004bea:	4659      	mov	r1, fp
 8004bec:	f7fb faec 	bl	80001c8 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d308      	bcc.n	8004c12 <UART_SetConfig+0x3de>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c06:	d204      	bcs.n	8004c12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e0b6      	b.n	8004d80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c18:	e0b2      	b.n	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d15e      	bne.n	8004ce2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x44a>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x400>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe fc76 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fe fc88 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004c64:	61f8      	str	r0, [r7, #28]
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <UART_SetConfig+0x56c>)
 8004c6a:	61fb      	str	r3, [r7, #28]
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fbd3 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004c72:	61f8      	str	r0, [r7, #28]
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	61fb      	str	r3, [r7, #28]
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d077      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005a      	lsls	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b0f      	cmp	r3, #15
 8004caa:	d916      	bls.n	8004cda <UART_SetConfig+0x4a6>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d212      	bcs.n	8004cda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	8afb      	ldrh	r3, [r7, #22]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	8afa      	ldrh	r2, [r7, #22]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	e052      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ce0:	e04e      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d827      	bhi.n	8004d3a <UART_SetConfig+0x506>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x4bc>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fc18 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e014      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe fc2a 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004d20:	61f8      	str	r0, [r7, #28]
        break;
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <UART_SetConfig+0x56c>)
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe fb75 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61f8      	str	r0, [r7, #28]
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	61fb      	str	r3, [r7, #28]
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d44:	bf00      	nop
    }

    if (pclk != 0U)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d019      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085a      	lsrs	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d909      	bls.n	8004d7a <UART_SetConfig+0x546>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d205      	bcs.n	8004d7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e002      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	; 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d10a      	bne.n	8004eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b098      	sub	sp, #96	; 0x60
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fb ff8c 	bl	8000e14 <HAL_GetTick>
 8004efc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d12e      	bne.n	8004f6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f88c 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d021      	beq.n	8004f6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
 8004f46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e062      	b.n	8005030 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d149      	bne.n	800500c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f856 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d03c      	beq.n	800500c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe4:	61fa      	str	r2, [r7, #28]
 8004fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e011      	b.n	8005030 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3758      	adds	r7, #88	; 0x58
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	e049      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d045      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fb fedf 	bl	8000e14 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <UART_WaitOnFlagUntilTimeout+0x30>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e048      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d031      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d110      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f8ff 	bl	8005294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2208      	movs	r2, #8
 800509a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e029      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	d111      	bne.n	80050de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f8e5 	bl	8005294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e00f      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d0a6      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005108:	b480      	push	{r7}
 800510a:	b097      	sub	sp, #92	; 0x5c
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d10e      	bne.n	800515a <UART_Start_Receive_IT+0x52>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <UART_Start_Receive_IT+0x48>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f240 12ff 	movw	r2, #511	; 0x1ff
 800514a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800514e:	e02d      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	22ff      	movs	r2, #255	; 0xff
 8005154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005158:	e028      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10d      	bne.n	800517e <UART_Start_Receive_IT+0x76>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <UART_Start_Receive_IT+0x6c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005172:	e01b      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	227f      	movs	r2, #127	; 0x7f
 8005178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800517c:	e016      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005186:	d10d      	bne.n	80051a4 <UART_Start_Receive_IT+0x9c>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <UART_Start_Receive_IT+0x92>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	227f      	movs	r2, #127	; 0x7f
 8005194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005198:	e008      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	223f      	movs	r2, #63	; 0x3f
 800519e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a2:	e003      	b.n	80051ac <UART_Start_Receive_IT+0xa4>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2222      	movs	r2, #34	; 0x22
 80051b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3308      	adds	r3, #8
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	657b      	str	r3, [r7, #84]	; 0x54
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80051de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d107      	bne.n	800520a <UART_Start_Receive_IT+0x102>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <UART_Start_Receive_IT+0x184>)
 8005206:	669a      	str	r2, [r3, #104]	; 0x68
 8005208:	e002      	b.n	8005210 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <UART_Start_Receive_IT+0x188>)
 800520e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d019      	beq.n	800524c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800522c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
 8005238:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_Start_Receive_IT+0x110>
 800524a:	e018      	b.n	800527e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	613b      	str	r3, [r7, #16]
   return(result);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f043 0320 	orr.w	r3, r3, #32
 8005260:	653b      	str	r3, [r7, #80]	; 0x50
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	69f9      	ldr	r1, [r7, #28]
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	61bb      	str	r3, [r7, #24]
   return(result);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	375c      	adds	r7, #92	; 0x5c
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	08005599 	.word	0x08005599
 8005290:	080053dd 	.word	0x080053dd

08005294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b095      	sub	sp, #84	; 0x54
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	643b      	str	r3, [r7, #64]	; 0x40
 80052bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	2b01      	cmp	r3, #1
 8005308:	d118      	bne.n	800533c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005350:	bf00      	nop
 8005352:	3754      	adds	r7, #84	; 0x54
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff fa44 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	60bb      	str	r3, [r7, #8]
   return(result);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	613b      	str	r3, [r7, #16]
   return(result);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fa10 	bl	80047f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d4:	bf00      	nop
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b09c      	sub	sp, #112	; 0x70
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f4:	2b22      	cmp	r3, #34	; 0x22
 80053f6:	f040 80be 	bne.w	8005576 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005400:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005408:	b2d9      	uxtb	r1, r3
 800540a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800540e:	b2da      	uxtb	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	400a      	ands	r2, r1
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 80a3 	bne.w	800558a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005458:	66bb      	str	r3, [r7, #104]	; 0x68
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005462:	65bb      	str	r3, [r7, #88]	; 0x58
 8005464:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	667b      	str	r3, [r7, #100]	; 0x64
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005496:	647a      	str	r2, [r7, #68]	; 0x44
 8005498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800549c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e5      	bne.n	8005476 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a34      	ldr	r2, [pc, #208]	; (8005594 <UART_RxISR_8BIT+0x1b8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01f      	beq.n	8005508 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	623b      	str	r3, [r7, #32]
   return(result);
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ea:	663b      	str	r3, [r7, #96]	; 0x60
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30
 80054f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	2b01      	cmp	r3, #1
 800550e:	d12e      	bne.n	800556e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60fb      	str	r3, [r7, #12]
   return(result);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	617b      	str	r3, [r7, #20]
   return(result);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b10      	cmp	r3, #16
 8005554:	d103      	bne.n	800555e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff f958 	bl	800481c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800556c:	e00d      	b.n	800558a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fa ffbe 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8005574:	e009      	b.n	800558a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	8b1b      	ldrh	r3, [r3, #24]
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	b292      	uxth	r2, r2
 8005588:	831a      	strh	r2, [r3, #24]
}
 800558a:	bf00      	nop
 800558c:	3770      	adds	r7, #112	; 0x70
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40008000 	.word	0x40008000

08005598 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b09c      	sub	sp, #112	; 0x70
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	f040 80be 	bne.w	8005732 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80055c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80055ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 80a3 	bne.w	8005746 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800560e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005614:	667b      	str	r3, [r7, #100]	; 0x64
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800561e:	657b      	str	r3, [r7, #84]	; 0x54
 8005620:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800562c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e6      	bne.n	8005600 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	663b      	str	r3, [r7, #96]	; 0x60
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005652:	643a      	str	r2, [r7, #64]	; 0x40
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a34      	ldr	r2, [pc, #208]	; (8005750 <UART_RxISR_16BIT+0x1b8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d01f      	beq.n	80056c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d12e      	bne.n	800572a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d103      	bne.n	800571a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2210      	movs	r2, #16
 8005718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff f87a 	bl	800481c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005728:	e00d      	b.n	8005746 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fa fee0 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8005730:	e009      	b.n	8005746 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	8b1b      	ldrh	r3, [r3, #24]
 8005738:	b29a      	uxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	b292      	uxth	r2, r2
 8005744:	831a      	strh	r2, [r3, #24]
}
 8005746:	bf00      	nop
 8005748:	3770      	adds	r7, #112	; 0x70
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40008000 	.word	0x40008000

08005754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	729a      	strb	r2, [r3, #10]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	8892      	ldrh	r2, [r2, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	889b      	ldrh	r3, [r3, #4]
 80057be:	3301      	adds	r3, #1
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	8912      	ldrh	r2, [r2, #8]
 80057c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80057c8:	fb01 f202 	mul.w	r2, r1, r2
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	7a9b      	ldrb	r3, [r3, #10]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	88db      	ldrh	r3, [r3, #6]
 80057e0:	3301      	adds	r3, #1
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	8912      	ldrh	r2, [r2, #8]
 80057e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80057ea:	fb01 f202 	mul.w	r2, r1, r2
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	889a      	ldrh	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	88db      	ldrh	r3, [r3, #6]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d104      	bne.n	800580c <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	729a      	strb	r2, [r3, #10]
		return 0;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <ring_buffer_put+0x6e>
	}
	return 1;
 800580c:	2301      	movs	r3, #1
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <ring_buffer_get>:
/**
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
	if (ring_buffer_is_empty(ring_buffer) == 0) {
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f84a 	bl	80058be <ring_buffer_is_empty>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d119      	bne.n	8005864 <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	88d2      	ldrh	r2, [r2, #6]
 8005838:	4413      	add	r3, r2
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	88db      	ldrh	r3, [r3, #6]
 8005844:	3301      	adds	r3, #1
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	8912      	ldrh	r2, [r2, #8]
 800584a:	fb93 f1f2 	sdiv	r1, r3, r2
 800584e:	fb01 f202 	mul.w	r2, r1, r2
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	729a      	strb	r2, [r3, #10]
		return 1;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <ring_buffer_get+0x4c>
	}
	return 0;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <ring_buffer_size>:

/**
 * @brief This function returns the size of the ring buffer
*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	81fb      	strh	r3, [r7, #14]

	if ((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head)) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7a9b      	ldrb	r3, [r3, #10]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10c      	bne.n	800589c <ring_buffer_size+0x2e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	88da      	ldrh	r2, [r3, #6]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	889b      	ldrh	r3, [r3, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d806      	bhi.n	800589c <ring_buffer_size+0x2e>
		size = ring_buffer->head - ring_buffer->tail;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	889a      	ldrh	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	81fb      	strh	r3, [r7, #14]
 800589a:	e009      	b.n	80058b0 <ring_buffer_size+0x42>
	} else {
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	889a      	ldrh	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8919      	ldrh	r1, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	88db      	ldrh	r3, [r3, #6]
 80058a8:	1acb      	subs	r3, r1, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 80058b0:	89fb      	ldrh	r3, [r7, #14]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <ring_buffer_is_empty>:

/**
 * @brief this function checks if the buffer is empty
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
	return ((ring_buffer->is_full == 0) && (ring_buffer->tail == ring_buffer->head));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	7a9b      	ldrb	r3, [r3, #10]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <ring_buffer_is_empty+0x20>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	88da      	ldrh	r2, [r3, #6]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	889b      	ldrh	r3, [r3, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d101      	bne.n	80058de <ring_buffer_is_empty+0x20>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <ring_buffer_is_empty+0x22>
 80058de:	2300      	movs	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af04      	add	r7, sp, #16
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	9302      	str	r3, [sp, #8]
 800590c:	2301      	movs	r3, #1
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	1dfb      	adds	r3, r7, #7
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2301      	movs	r3, #1
 8005916:	2200      	movs	r2, #0
 8005918:	2178      	movs	r1, #120	; 0x78
 800591a:	4803      	ldr	r0, [pc, #12]	; (8005928 <ssd1306_WriteCommand+0x2c>)
 800591c:	f7fb fea6 	bl	800166c <HAL_I2C_Mem_Write>
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000094 	.word	0x20000094

0800592c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af04      	add	r7, sp, #16
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	9202      	str	r2, [sp, #8]
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	2240      	movs	r2, #64	; 0x40
 800594a:	2178      	movs	r1, #120	; 0x78
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <ssd1306_WriteData+0x30>)
 800594e:	f7fb fe8d 	bl	800166c <HAL_I2C_Mem_Write>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000094 	.word	0x20000094

08005960 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005964:	f7ff ffc3 	bl	80058ee <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005968:	2064      	movs	r0, #100	; 0x64
 800596a:	f7fb fa5f 	bl	8000e2c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800596e:	2000      	movs	r0, #0
 8005970:	f000 f9da 	bl	8005d28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005974:	2020      	movs	r0, #32
 8005976:	f7ff ffc1 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800597a:	2000      	movs	r0, #0
 800597c:	f7ff ffbe 	bl	80058fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005980:	20b0      	movs	r0, #176	; 0xb0
 8005982:	f7ff ffbb 	bl	80058fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005986:	20c8      	movs	r0, #200	; 0xc8
 8005988:	f7ff ffb8 	bl	80058fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800598c:	2000      	movs	r0, #0
 800598e:	f7ff ffb5 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005992:	2010      	movs	r0, #16
 8005994:	f7ff ffb2 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005998:	2040      	movs	r0, #64	; 0x40
 800599a:	f7ff ffaf 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800599e:	20ff      	movs	r0, #255	; 0xff
 80059a0:	f000 f9ae 	bl	8005d00 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80059a4:	20a1      	movs	r0, #161	; 0xa1
 80059a6:	f7ff ffa9 	bl	80058fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80059aa:	20a6      	movs	r0, #166	; 0xa6
 80059ac:	f7ff ffa6 	bl	80058fc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80059b0:	20a8      	movs	r0, #168	; 0xa8
 80059b2:	f7ff ffa3 	bl	80058fc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80059b6:	203f      	movs	r0, #63	; 0x3f
 80059b8:	f7ff ffa0 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80059bc:	20a4      	movs	r0, #164	; 0xa4
 80059be:	f7ff ff9d 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80059c2:	20d3      	movs	r0, #211	; 0xd3
 80059c4:	f7ff ff9a 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80059c8:	2000      	movs	r0, #0
 80059ca:	f7ff ff97 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80059ce:	20d5      	movs	r0, #213	; 0xd5
 80059d0:	f7ff ff94 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80059d4:	20f0      	movs	r0, #240	; 0xf0
 80059d6:	f7ff ff91 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80059da:	20d9      	movs	r0, #217	; 0xd9
 80059dc:	f7ff ff8e 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80059e0:	2022      	movs	r0, #34	; 0x22
 80059e2:	f7ff ff8b 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80059e6:	20da      	movs	r0, #218	; 0xda
 80059e8:	f7ff ff88 	bl	80058fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80059ec:	2012      	movs	r0, #18
 80059ee:	f7ff ff85 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80059f2:	20db      	movs	r0, #219	; 0xdb
 80059f4:	f7ff ff82 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80059f8:	2020      	movs	r0, #32
 80059fa:	f7ff ff7f 	bl	80058fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80059fe:	208d      	movs	r0, #141	; 0x8d
 8005a00:	f7ff ff7c 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005a04:	2014      	movs	r0, #20
 8005a06:	f7ff ff79 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	f000 f98c 	bl	8005d28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005a10:	2000      	movs	r0, #0
 8005a12:	f000 f80f 	bl	8005a34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005a16:	f000 f831 	bl	8005a7c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <ssd1306_Init+0xd0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <ssd1306_Init+0xd0>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005a26:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <ssd1306_Init+0xd0>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	711a      	strb	r2, [r3, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000594 	.word	0x20000594

08005a34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e00d      	b.n	8005a60 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <ssd1306_Fill+0x1a>
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	e000      	b.n	8005a50 <ssd1306_Fill+0x1c>
 8005a4e:	21ff      	movs	r1, #255	; 0xff
 8005a50:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <ssd1306_Fill+0x44>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	460a      	mov	r2, r1
 8005a58:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d3ed      	bcc.n	8005a44 <ssd1306_Fill+0x10>
    }
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000194 	.word	0x20000194

08005a7c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005a82:	2300      	movs	r3, #0
 8005a84:	71fb      	strb	r3, [r7, #7]
 8005a86:	e016      	b.n	8005ab6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	3b50      	subs	r3, #80	; 0x50
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff ff34 	bl	80058fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7ff ff31 	bl	80058fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f7ff ff2e 	bl	80058fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	01db      	lsls	r3, r3, #7
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <ssd1306_UpdateScreen+0x4c>)
 8005aa6:	4413      	add	r3, r2
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ff3e 	bl	800592c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	71fb      	strb	r3, [r7, #7]
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b07      	cmp	r3, #7
 8005aba:	d9e5      	bls.n	8005a88 <ssd1306_UpdateScreen+0xc>
    }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000194 	.word	0x20000194

08005acc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	71bb      	strb	r3, [r7, #6]
 8005ada:	4613      	mov	r3, r2
 8005adc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db3d      	blt.n	8005b62 <ssd1306_DrawPixel+0x96>
 8005ae6:	79bb      	ldrb	r3, [r7, #6]
 8005ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8005aea:	d83a      	bhi.n	8005b62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005aec:	797b      	ldrb	r3, [r7, #5]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d11a      	bne.n	8005b28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005af2:	79fa      	ldrb	r2, [r7, #7]
 8005af4:	79bb      	ldrb	r3, [r7, #6]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	b2d8      	uxtb	r0, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <ssd1306_DrawPixel+0xa4>)
 8005b02:	5cd3      	ldrb	r3, [r2, r3]
 8005b04:	b25a      	sxtb	r2, r3
 8005b06:	79bb      	ldrb	r3, [r7, #6]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b259      	sxtb	r1, r3
 8005b18:	79fa      	ldrb	r2, [r7, #7]
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	01db      	lsls	r3, r3, #7
 8005b1e:	4413      	add	r3, r2
 8005b20:	b2c9      	uxtb	r1, r1
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <ssd1306_DrawPixel+0xa4>)
 8005b24:	54d1      	strb	r1, [r2, r3]
 8005b26:	e01d      	b.n	8005b64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	79bb      	ldrb	r3, [r7, #6]
 8005b2c:	08db      	lsrs	r3, r3, #3
 8005b2e:	b2d8      	uxtb	r0, r3
 8005b30:	4603      	mov	r3, r0
 8005b32:	01db      	lsls	r3, r3, #7
 8005b34:	4413      	add	r3, r2
 8005b36:	4a0e      	ldr	r2, [pc, #56]	; (8005b70 <ssd1306_DrawPixel+0xa4>)
 8005b38:	5cd3      	ldrb	r3, [r2, r3]
 8005b3a:	b25a      	sxtb	r2, r3
 8005b3c:	79bb      	ldrb	r3, [r7, #6]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b259      	sxtb	r1, r3
 8005b52:	79fa      	ldrb	r2, [r7, #7]
 8005b54:	4603      	mov	r3, r0
 8005b56:	01db      	lsls	r3, r3, #7
 8005b58:	4413      	add	r3, r2
 8005b5a:	b2c9      	uxtb	r1, r1
 8005b5c:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <ssd1306_DrawPixel+0xa4>)
 8005b5e:	54d1      	strb	r1, [r2, r3]
 8005b60:	e000      	b.n	8005b64 <ssd1306_DrawPixel+0x98>
        return;
 8005b62:	bf00      	nop
    }
}
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000194 	.word	0x20000194

08005b74 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	1d38      	adds	r0, r7, #4
 8005b7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005b82:	461a      	mov	r2, r3
 8005b84:	4623      	mov	r3, r4
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b1f      	cmp	r3, #31
 8005b90:	d902      	bls.n	8005b98 <ssd1306_WriteChar+0x24>
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b7e      	cmp	r3, #126	; 0x7e
 8005b96:	d901      	bls.n	8005b9c <ssd1306_WriteChar+0x28>
        return 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e06d      	b.n	8005c78 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005b9c:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	793b      	ldrb	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	2b80      	cmp	r3, #128	; 0x80
 8005ba8:	dc06      	bgt.n	8005bb8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005baa:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005bac:	885b      	ldrh	r3, [r3, #2]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	797b      	ldrb	r3, [r7, #5]
 8005bb2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	dd01      	ble.n	8005bbc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e05d      	b.n	8005c78 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e04c      	b.n	8005c5c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3b20      	subs	r3, #32
 8005bc8:	7979      	ldrb	r1, [r7, #5]
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	440b      	add	r3, r1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e034      	b.n	8005c4c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005bf2:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	b2d8      	uxtb	r0, r3
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	7bba      	ldrb	r2, [r7, #14]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f7ff ff5b 	bl	8005acc <ssd1306_DrawPixel>
 8005c16:	e016      	b.n	8005c46 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	4413      	add	r3, r2
 8005c24:	b2d8      	uxtb	r0, r3
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4413      	add	r3, r2
 8005c32:	b2d9      	uxtb	r1, r3
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	f7ff ff43 	bl	8005acc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	793b      	ldrb	r3, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d3c5      	bcc.n	8005be2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	797b      	ldrb	r3, [r7, #5]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d3ad      	bcc.n	8005bc2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	793b      	ldrb	r3, [r7, #4]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <ssd1306_WriteChar+0x10c>)
 8005c74:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3724      	adds	r7, #36	; 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd90      	pop	{r4, r7, pc}
 8005c80:	20000594 	.word	0x20000594

08005c84 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	1d38      	adds	r0, r7, #4
 8005c8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005c92:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8005c94:	e012      	b.n	8005cbc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	7818      	ldrb	r0, [r3, #0]
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	1d3a      	adds	r2, r7, #4
 8005c9e:	ca06      	ldmia	r2, {r1, r2}
 8005ca0:	f7ff ff68 	bl	8005b74 <ssd1306_WriteChar>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d002      	beq.n	8005cb6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	e008      	b.n	8005cc8 <ssd1306_WriteString+0x44>
        }
        str++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e8      	bne.n	8005c96 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460a      	mov	r2, r1
 8005cda:	71fb      	strb	r3, [r7, #7]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <ssd1306_SetCursor+0x2c>)
 8005ce6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005ce8:	79bb      	ldrb	r3, [r7, #6]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <ssd1306_SetCursor+0x2c>)
 8005cee:	805a      	strh	r2, [r3, #2]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000594 	.word	0x20000594

08005d00 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005d0a:	2381      	movs	r3, #129	; 0x81
 8005d0c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fdf3 	bl	80058fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fdef 	bl	80058fc <ssd1306_WriteCommand>
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005d38:	23af      	movs	r3, #175	; 0xaf
 8005d3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <ssd1306_SetDisplayOn+0x38>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	715a      	strb	r2, [r3, #5]
 8005d42:	e004      	b.n	8005d4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005d44:	23ae      	movs	r3, #174	; 0xae
 8005d46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <ssd1306_SetDisplayOn+0x38>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fdd3 	bl	80058fc <ssd1306_WriteCommand>
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000594 	.word	0x20000594

08005d64 <std>:
 8005d64:	2300      	movs	r3, #0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	4604      	mov	r4, r0
 8005d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d72:	6083      	str	r3, [r0, #8]
 8005d74:	8181      	strh	r1, [r0, #12]
 8005d76:	6643      	str	r3, [r0, #100]	; 0x64
 8005d78:	81c2      	strh	r2, [r0, #14]
 8005d7a:	6183      	str	r3, [r0, #24]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	2208      	movs	r2, #8
 8005d80:	305c      	adds	r0, #92	; 0x5c
 8005d82:	f000 f9e3 	bl	800614c <memset>
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <std+0x38>)
 8005d88:	6263      	str	r3, [r4, #36]	; 0x24
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x3c>)
 8005d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x40>)
 8005d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x44>)
 8005d94:	6224      	str	r4, [r4, #32]
 8005d96:	6323      	str	r3, [r4, #48]	; 0x30
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08005f7d 	.word	0x08005f7d
 8005da0:	08005f9f 	.word	0x08005f9f
 8005da4:	08005fd7 	.word	0x08005fd7
 8005da8:	08005ffb 	.word	0x08005ffb

08005dac <stdio_exit_handler>:
 8005dac:	4a02      	ldr	r2, [pc, #8]	; (8005db8 <stdio_exit_handler+0xc>)
 8005dae:	4903      	ldr	r1, [pc, #12]	; (8005dbc <stdio_exit_handler+0x10>)
 8005db0:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <stdio_exit_handler+0x14>)
 8005db2:	f000 b869 	b.w	8005e88 <_fwalk_sglue>
 8005db6:	bf00      	nop
 8005db8:	2000001c 	.word	0x2000001c
 8005dbc:	0800653d 	.word	0x0800653d
 8005dc0:	20000028 	.word	0x20000028

08005dc4 <cleanup_stdio>:
 8005dc4:	6841      	ldr	r1, [r0, #4]
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <cleanup_stdio+0x34>)
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	4604      	mov	r4, r0
 8005dce:	d001      	beq.n	8005dd4 <cleanup_stdio+0x10>
 8005dd0:	f000 fbb4 	bl	800653c <_fflush_r>
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <cleanup_stdio+0x38>)
 8005dd8:	4299      	cmp	r1, r3
 8005dda:	d002      	beq.n	8005de2 <cleanup_stdio+0x1e>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fbad 	bl	800653c <_fflush_r>
 8005de2:	68e1      	ldr	r1, [r4, #12]
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <cleanup_stdio+0x3c>)
 8005de6:	4299      	cmp	r1, r3
 8005de8:	d004      	beq.n	8005df4 <cleanup_stdio+0x30>
 8005dea:	4620      	mov	r0, r4
 8005dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df0:	f000 bba4 	b.w	800653c <_fflush_r>
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	bf00      	nop
 8005df8:	2000059c 	.word	0x2000059c
 8005dfc:	20000604 	.word	0x20000604
 8005e00:	2000066c 	.word	0x2000066c

08005e04 <global_stdio_init.part.0>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <global_stdio_init.part.0+0x30>)
 8005e08:	4c0b      	ldr	r4, [pc, #44]	; (8005e38 <global_stdio_init.part.0+0x34>)
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	; (8005e3c <global_stdio_init.part.0+0x38>)
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	2200      	movs	r2, #0
 8005e12:	2104      	movs	r1, #4
 8005e14:	f7ff ffa6 	bl	8005d64 <std>
 8005e18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	2109      	movs	r1, #9
 8005e20:	f7ff ffa0 	bl	8005d64 <std>
 8005e24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e28:	2202      	movs	r2, #2
 8005e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2e:	2112      	movs	r1, #18
 8005e30:	f7ff bf98 	b.w	8005d64 <std>
 8005e34:	200006d4 	.word	0x200006d4
 8005e38:	2000059c 	.word	0x2000059c
 8005e3c:	08005dad 	.word	0x08005dad

08005e40 <__sfp_lock_acquire>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__sfp_lock_acquire+0x8>)
 8005e42:	f000 b9fb 	b.w	800623c <__retarget_lock_acquire_recursive>
 8005e46:	bf00      	nop
 8005e48:	200006dd 	.word	0x200006dd

08005e4c <__sfp_lock_release>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__sfp_lock_release+0x8>)
 8005e4e:	f000 b9f6 	b.w	800623e <__retarget_lock_release_recursive>
 8005e52:	bf00      	nop
 8005e54:	200006dd 	.word	0x200006dd

08005e58 <__sinit>:
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f7ff fff0 	bl	8005e40 <__sfp_lock_acquire>
 8005e60:	6a23      	ldr	r3, [r4, #32]
 8005e62:	b11b      	cbz	r3, 8005e6c <__sinit+0x14>
 8005e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e68:	f7ff bff0 	b.w	8005e4c <__sfp_lock_release>
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <__sinit+0x28>)
 8005e6e:	6223      	str	r3, [r4, #32]
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <__sinit+0x2c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f5      	bne.n	8005e64 <__sinit+0xc>
 8005e78:	f7ff ffc4 	bl	8005e04 <global_stdio_init.part.0>
 8005e7c:	e7f2      	b.n	8005e64 <__sinit+0xc>
 8005e7e:	bf00      	nop
 8005e80:	08005dc5 	.word	0x08005dc5
 8005e84:	200006d4 	.word	0x200006d4

08005e88 <_fwalk_sglue>:
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	2600      	movs	r6, #0
 8005e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e98:	f1b9 0901 	subs.w	r9, r9, #1
 8005e9c:	d505      	bpl.n	8005eaa <_fwalk_sglue+0x22>
 8005e9e:	6824      	ldr	r4, [r4, #0]
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	d1f7      	bne.n	8005e94 <_fwalk_sglue+0xc>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	89ab      	ldrh	r3, [r5, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d907      	bls.n	8005ec0 <_fwalk_sglue+0x38>
 8005eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	d003      	beq.n	8005ec0 <_fwalk_sglue+0x38>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c0      	blx	r8
 8005ebe:	4306      	orrs	r6, r0
 8005ec0:	3568      	adds	r5, #104	; 0x68
 8005ec2:	e7e9      	b.n	8005e98 <_fwalk_sglue+0x10>

08005ec4 <_puts_r>:
 8005ec4:	6a03      	ldr	r3, [r0, #32]
 8005ec6:	b570      	push	{r4, r5, r6, lr}
 8005ec8:	6884      	ldr	r4, [r0, #8]
 8005eca:	4605      	mov	r5, r0
 8005ecc:	460e      	mov	r6, r1
 8005ece:	b90b      	cbnz	r3, 8005ed4 <_puts_r+0x10>
 8005ed0:	f7ff ffc2 	bl	8005e58 <__sinit>
 8005ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d405      	bmi.n	8005ee6 <_puts_r+0x22>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	0598      	lsls	r0, r3, #22
 8005ede:	d402      	bmi.n	8005ee6 <_puts_r+0x22>
 8005ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee2:	f000 f9ab 	bl	800623c <__retarget_lock_acquire_recursive>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	0719      	lsls	r1, r3, #28
 8005eea:	d513      	bpl.n	8005f14 <_puts_r+0x50>
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	b18b      	cbz	r3, 8005f14 <_puts_r+0x50>
 8005ef0:	3e01      	subs	r6, #1
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	b9e9      	cbnz	r1, 8005f3a <_puts_r+0x76>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da2e      	bge.n	8005f60 <_puts_r+0x9c>
 8005f02:	4622      	mov	r2, r4
 8005f04:	210a      	movs	r1, #10
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f87b 	bl	8006002 <__swbuf_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d007      	beq.n	8005f20 <_puts_r+0x5c>
 8005f10:	250a      	movs	r5, #10
 8005f12:	e007      	b.n	8005f24 <_puts_r+0x60>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 f8b0 	bl	800607c <__swsetup_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0e7      	beq.n	8005ef0 <_puts_r+0x2c>
 8005f20:	f04f 35ff 	mov.w	r5, #4294967295
 8005f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f26:	07da      	lsls	r2, r3, #31
 8005f28:	d405      	bmi.n	8005f36 <_puts_r+0x72>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	059b      	lsls	r3, r3, #22
 8005f2e:	d402      	bmi.n	8005f36 <_puts_r+0x72>
 8005f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f32:	f000 f984 	bl	800623e <__retarget_lock_release_recursive>
 8005f36:	4628      	mov	r0, r5
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da04      	bge.n	8005f48 <_puts_r+0x84>
 8005f3e:	69a2      	ldr	r2, [r4, #24]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	dc06      	bgt.n	8005f52 <_puts_r+0x8e>
 8005f44:	290a      	cmp	r1, #10
 8005f46:	d004      	beq.n	8005f52 <_puts_r+0x8e>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	6022      	str	r2, [r4, #0]
 8005f4e:	7019      	strb	r1, [r3, #0]
 8005f50:	e7cf      	b.n	8005ef2 <_puts_r+0x2e>
 8005f52:	4622      	mov	r2, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 f854 	bl	8006002 <__swbuf_r>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1c9      	bne.n	8005ef2 <_puts_r+0x2e>
 8005f5e:	e7df      	b.n	8005f20 <_puts_r+0x5c>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	250a      	movs	r5, #10
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	6022      	str	r2, [r4, #0]
 8005f68:	701d      	strb	r5, [r3, #0]
 8005f6a:	e7db      	b.n	8005f24 <_puts_r+0x60>

08005f6c <puts>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <puts+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f7ff bfa7 	b.w	8005ec4 <_puts_r>
 8005f76:	bf00      	nop
 8005f78:	20000074 	.word	0x20000074

08005f7c <__sread>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	460c      	mov	r4, r1
 8005f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f84:	f000 f90c 	bl	80061a0 <_read_r>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	bfab      	itete	ge
 8005f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f90:	181b      	addge	r3, r3, r0
 8005f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f96:	bfac      	ite	ge
 8005f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f9a:	81a3      	strhlt	r3, [r4, #12]
 8005f9c:	bd10      	pop	{r4, pc}

08005f9e <__swrite>:
 8005f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	461f      	mov	r7, r3
 8005fa4:	898b      	ldrh	r3, [r1, #12]
 8005fa6:	05db      	lsls	r3, r3, #23
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4616      	mov	r6, r2
 8005fae:	d505      	bpl.n	8005fbc <__swrite+0x1e>
 8005fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f000 f8e0 	bl	800617c <_lseek_r>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	4632      	mov	r2, r6
 8005fca:	463b      	mov	r3, r7
 8005fcc:	4628      	mov	r0, r5
 8005fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd2:	f000 b8f7 	b.w	80061c4 <_write_r>

08005fd6 <__sseek>:
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	460c      	mov	r4, r1
 8005fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fde:	f000 f8cd 	bl	800617c <_lseek_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	bf15      	itete	ne
 8005fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ff2:	81a3      	strheq	r3, [r4, #12]
 8005ff4:	bf18      	it	ne
 8005ff6:	81a3      	strhne	r3, [r4, #12]
 8005ff8:	bd10      	pop	{r4, pc}

08005ffa <__sclose>:
 8005ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffe:	f000 b8ad 	b.w	800615c <_close_r>

08006002 <__swbuf_r>:
 8006002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006004:	460e      	mov	r6, r1
 8006006:	4614      	mov	r4, r2
 8006008:	4605      	mov	r5, r0
 800600a:	b118      	cbz	r0, 8006014 <__swbuf_r+0x12>
 800600c:	6a03      	ldr	r3, [r0, #32]
 800600e:	b90b      	cbnz	r3, 8006014 <__swbuf_r+0x12>
 8006010:	f7ff ff22 	bl	8005e58 <__sinit>
 8006014:	69a3      	ldr	r3, [r4, #24]
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	071a      	lsls	r2, r3, #28
 800601c:	d525      	bpl.n	800606a <__swbuf_r+0x68>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	b31b      	cbz	r3, 800606a <__swbuf_r+0x68>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	1a98      	subs	r0, r3, r2
 8006028:	6963      	ldr	r3, [r4, #20]
 800602a:	b2f6      	uxtb	r6, r6
 800602c:	4283      	cmp	r3, r0
 800602e:	4637      	mov	r7, r6
 8006030:	dc04      	bgt.n	800603c <__swbuf_r+0x3a>
 8006032:	4621      	mov	r1, r4
 8006034:	4628      	mov	r0, r5
 8006036:	f000 fa81 	bl	800653c <_fflush_r>
 800603a:	b9e0      	cbnz	r0, 8006076 <__swbuf_r+0x74>
 800603c:	68a3      	ldr	r3, [r4, #8]
 800603e:	3b01      	subs	r3, #1
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	6022      	str	r2, [r4, #0]
 8006048:	701e      	strb	r6, [r3, #0]
 800604a:	6962      	ldr	r2, [r4, #20]
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	429a      	cmp	r2, r3
 8006050:	d004      	beq.n	800605c <__swbuf_r+0x5a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	07db      	lsls	r3, r3, #31
 8006056:	d506      	bpl.n	8006066 <__swbuf_r+0x64>
 8006058:	2e0a      	cmp	r6, #10
 800605a:	d104      	bne.n	8006066 <__swbuf_r+0x64>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fa6c 	bl	800653c <_fflush_r>
 8006064:	b938      	cbnz	r0, 8006076 <__swbuf_r+0x74>
 8006066:	4638      	mov	r0, r7
 8006068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f805 	bl	800607c <__swsetup_r>
 8006072:	2800      	cmp	r0, #0
 8006074:	d0d5      	beq.n	8006022 <__swbuf_r+0x20>
 8006076:	f04f 37ff 	mov.w	r7, #4294967295
 800607a:	e7f4      	b.n	8006066 <__swbuf_r+0x64>

0800607c <__swsetup_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <__swsetup_r+0xac>)
 8006080:	4605      	mov	r5, r0
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	460c      	mov	r4, r1
 8006086:	b118      	cbz	r0, 8006090 <__swsetup_r+0x14>
 8006088:	6a03      	ldr	r3, [r0, #32]
 800608a:	b90b      	cbnz	r3, 8006090 <__swsetup_r+0x14>
 800608c:	f7ff fee4 	bl	8005e58 <__sinit>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006096:	0718      	lsls	r0, r3, #28
 8006098:	d422      	bmi.n	80060e0 <__swsetup_r+0x64>
 800609a:	06d9      	lsls	r1, r3, #27
 800609c:	d407      	bmi.n	80060ae <__swsetup_r+0x32>
 800609e:	2309      	movs	r3, #9
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e034      	b.n	8006118 <__swsetup_r+0x9c>
 80060ae:	0758      	lsls	r0, r3, #29
 80060b0:	d512      	bpl.n	80060d8 <__swsetup_r+0x5c>
 80060b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b4:	b141      	cbz	r1, 80060c8 <__swsetup_r+0x4c>
 80060b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ba:	4299      	cmp	r1, r3
 80060bc:	d002      	beq.n	80060c4 <__swsetup_r+0x48>
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f8be 	bl	8006240 <_free_r>
 80060c4:	2300      	movs	r3, #0
 80060c6:	6363      	str	r3, [r4, #52]	; 0x34
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	2300      	movs	r3, #0
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f043 0308 	orr.w	r3, r3, #8
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	b94b      	cbnz	r3, 80060f8 <__swsetup_r+0x7c>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ee:	d003      	beq.n	80060f8 <__swsetup_r+0x7c>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 fa70 	bl	80065d8 <__smakebuf_r>
 80060f8:	89a0      	ldrh	r0, [r4, #12]
 80060fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060fe:	f010 0301 	ands.w	r3, r0, #1
 8006102:	d00a      	beq.n	800611a <__swsetup_r+0x9e>
 8006104:	2300      	movs	r3, #0
 8006106:	60a3      	str	r3, [r4, #8]
 8006108:	6963      	ldr	r3, [r4, #20]
 800610a:	425b      	negs	r3, r3
 800610c:	61a3      	str	r3, [r4, #24]
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	b943      	cbnz	r3, 8006124 <__swsetup_r+0xa8>
 8006112:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006116:	d1c4      	bne.n	80060a2 <__swsetup_r+0x26>
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	0781      	lsls	r1, r0, #30
 800611c:	bf58      	it	pl
 800611e:	6963      	ldrpl	r3, [r4, #20]
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	e7f4      	b.n	800610e <__swsetup_r+0x92>
 8006124:	2000      	movs	r0, #0
 8006126:	e7f7      	b.n	8006118 <__swsetup_r+0x9c>
 8006128:	20000074 	.word	0x20000074

0800612c <memcmp>:
 800612c:	b510      	push	{r4, lr}
 800612e:	3901      	subs	r1, #1
 8006130:	4402      	add	r2, r0
 8006132:	4290      	cmp	r0, r2
 8006134:	d101      	bne.n	800613a <memcmp+0xe>
 8006136:	2000      	movs	r0, #0
 8006138:	e005      	b.n	8006146 <memcmp+0x1a>
 800613a:	7803      	ldrb	r3, [r0, #0]
 800613c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006140:	42a3      	cmp	r3, r4
 8006142:	d001      	beq.n	8006148 <memcmp+0x1c>
 8006144:	1b18      	subs	r0, r3, r4
 8006146:	bd10      	pop	{r4, pc}
 8006148:	3001      	adds	r0, #1
 800614a:	e7f2      	b.n	8006132 <memcmp+0x6>

0800614c <memset>:
 800614c:	4402      	add	r2, r0
 800614e:	4603      	mov	r3, r0
 8006150:	4293      	cmp	r3, r2
 8006152:	d100      	bne.n	8006156 <memset+0xa>
 8006154:	4770      	bx	lr
 8006156:	f803 1b01 	strb.w	r1, [r3], #1
 800615a:	e7f9      	b.n	8006150 <memset+0x4>

0800615c <_close_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d06      	ldr	r5, [pc, #24]	; (8006178 <_close_r+0x1c>)
 8006160:	2300      	movs	r3, #0
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f7fa fd3d 	bl	8000be6 <_close>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_close_r+0x1a>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_close_r+0x1a>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	200006d8 	.word	0x200006d8

0800617c <_lseek_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d07      	ldr	r5, [pc, #28]	; (800619c <_lseek_r+0x20>)
 8006180:	4604      	mov	r4, r0
 8006182:	4608      	mov	r0, r1
 8006184:	4611      	mov	r1, r2
 8006186:	2200      	movs	r2, #0
 8006188:	602a      	str	r2, [r5, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f7fa fd52 	bl	8000c34 <_lseek>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_lseek_r+0x1e>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_lseek_r+0x1e>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	200006d8 	.word	0x200006d8

080061a0 <_read_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d07      	ldr	r5, [pc, #28]	; (80061c0 <_read_r+0x20>)
 80061a4:	4604      	mov	r4, r0
 80061a6:	4608      	mov	r0, r1
 80061a8:	4611      	mov	r1, r2
 80061aa:	2200      	movs	r2, #0
 80061ac:	602a      	str	r2, [r5, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f7fa fcfc 	bl	8000bac <_read>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_read_r+0x1e>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_read_r+0x1e>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	200006d8 	.word	0x200006d8

080061c4 <_write_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	; (80061e4 <_write_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fa f976 	bl	80004c4 <_write>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_write_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_write_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200006d8 	.word	0x200006d8

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000074 	.word	0x20000074

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4d0d      	ldr	r5, [pc, #52]	; (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2600      	movs	r6, #0
 8006200:	42a6      	cmp	r6, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4d0b      	ldr	r5, [pc, #44]	; (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	; (8006238 <__libc_init_array+0x44>)
 8006208:	f000 fa54 	bl	80066b4 <_init>
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2600      	movs	r6, #0
 8006212:	42a6      	cmp	r6, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f855 3b04 	ldr.w	r3, [r5], #4
 800621c:	4798      	blx	r3
 800621e:	3601      	adds	r6, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
 8006226:	4798      	blx	r3
 8006228:	3601      	adds	r6, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	08008814 	.word	0x08008814
 8006230:	08008814 	.word	0x08008814
 8006234:	08008814 	.word	0x08008814
 8006238:	08008818 	.word	0x08008818

0800623c <__retarget_lock_acquire_recursive>:
 800623c:	4770      	bx	lr

0800623e <__retarget_lock_release_recursive>:
 800623e:	4770      	bx	lr

08006240 <_free_r>:
 8006240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006242:	2900      	cmp	r1, #0
 8006244:	d044      	beq.n	80062d0 <_free_r+0x90>
 8006246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624a:	9001      	str	r0, [sp, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f1a1 0404 	sub.w	r4, r1, #4
 8006252:	bfb8      	it	lt
 8006254:	18e4      	addlt	r4, r4, r3
 8006256:	f000 f8df 	bl	8006418 <__malloc_lock>
 800625a:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <_free_r+0x94>)
 800625c:	9801      	ldr	r0, [sp, #4]
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	b933      	cbnz	r3, 8006270 <_free_r+0x30>
 8006262:	6063      	str	r3, [r4, #4]
 8006264:	6014      	str	r4, [r2, #0]
 8006266:	b003      	add	sp, #12
 8006268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800626c:	f000 b8da 	b.w	8006424 <__malloc_unlock>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d908      	bls.n	8006286 <_free_r+0x46>
 8006274:	6825      	ldr	r5, [r4, #0]
 8006276:	1961      	adds	r1, r4, r5
 8006278:	428b      	cmp	r3, r1
 800627a:	bf01      	itttt	eq
 800627c:	6819      	ldreq	r1, [r3, #0]
 800627e:	685b      	ldreq	r3, [r3, #4]
 8006280:	1949      	addeq	r1, r1, r5
 8006282:	6021      	streq	r1, [r4, #0]
 8006284:	e7ed      	b.n	8006262 <_free_r+0x22>
 8006286:	461a      	mov	r2, r3
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	b10b      	cbz	r3, 8006290 <_free_r+0x50>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d9fa      	bls.n	8006286 <_free_r+0x46>
 8006290:	6811      	ldr	r1, [r2, #0]
 8006292:	1855      	adds	r5, r2, r1
 8006294:	42a5      	cmp	r5, r4
 8006296:	d10b      	bne.n	80062b0 <_free_r+0x70>
 8006298:	6824      	ldr	r4, [r4, #0]
 800629a:	4421      	add	r1, r4
 800629c:	1854      	adds	r4, r2, r1
 800629e:	42a3      	cmp	r3, r4
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	d1e0      	bne.n	8006266 <_free_r+0x26>
 80062a4:	681c      	ldr	r4, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	6053      	str	r3, [r2, #4]
 80062aa:	440c      	add	r4, r1
 80062ac:	6014      	str	r4, [r2, #0]
 80062ae:	e7da      	b.n	8006266 <_free_r+0x26>
 80062b0:	d902      	bls.n	80062b8 <_free_r+0x78>
 80062b2:	230c      	movs	r3, #12
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	e7d6      	b.n	8006266 <_free_r+0x26>
 80062b8:	6825      	ldr	r5, [r4, #0]
 80062ba:	1961      	adds	r1, r4, r5
 80062bc:	428b      	cmp	r3, r1
 80062be:	bf04      	itt	eq
 80062c0:	6819      	ldreq	r1, [r3, #0]
 80062c2:	685b      	ldreq	r3, [r3, #4]
 80062c4:	6063      	str	r3, [r4, #4]
 80062c6:	bf04      	itt	eq
 80062c8:	1949      	addeq	r1, r1, r5
 80062ca:	6021      	streq	r1, [r4, #0]
 80062cc:	6054      	str	r4, [r2, #4]
 80062ce:	e7ca      	b.n	8006266 <_free_r+0x26>
 80062d0:	b003      	add	sp, #12
 80062d2:	bd30      	pop	{r4, r5, pc}
 80062d4:	200006e0 	.word	0x200006e0

080062d8 <sbrk_aligned>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4e0e      	ldr	r6, [pc, #56]	; (8006314 <sbrk_aligned+0x3c>)
 80062dc:	460c      	mov	r4, r1
 80062de:	6831      	ldr	r1, [r6, #0]
 80062e0:	4605      	mov	r5, r0
 80062e2:	b911      	cbnz	r1, 80062ea <sbrk_aligned+0x12>
 80062e4:	f000 f9d6 	bl	8006694 <_sbrk_r>
 80062e8:	6030      	str	r0, [r6, #0]
 80062ea:	4621      	mov	r1, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 f9d1 	bl	8006694 <_sbrk_r>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	d00a      	beq.n	800630c <sbrk_aligned+0x34>
 80062f6:	1cc4      	adds	r4, r0, #3
 80062f8:	f024 0403 	bic.w	r4, r4, #3
 80062fc:	42a0      	cmp	r0, r4
 80062fe:	d007      	beq.n	8006310 <sbrk_aligned+0x38>
 8006300:	1a21      	subs	r1, r4, r0
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f9c6 	bl	8006694 <_sbrk_r>
 8006308:	3001      	adds	r0, #1
 800630a:	d101      	bne.n	8006310 <sbrk_aligned+0x38>
 800630c:	f04f 34ff 	mov.w	r4, #4294967295
 8006310:	4620      	mov	r0, r4
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	200006e4 	.word	0x200006e4

08006318 <_malloc_r>:
 8006318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800631c:	1ccd      	adds	r5, r1, #3
 800631e:	f025 0503 	bic.w	r5, r5, #3
 8006322:	3508      	adds	r5, #8
 8006324:	2d0c      	cmp	r5, #12
 8006326:	bf38      	it	cc
 8006328:	250c      	movcc	r5, #12
 800632a:	2d00      	cmp	r5, #0
 800632c:	4607      	mov	r7, r0
 800632e:	db01      	blt.n	8006334 <_malloc_r+0x1c>
 8006330:	42a9      	cmp	r1, r5
 8006332:	d905      	bls.n	8006340 <_malloc_r+0x28>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	2600      	movs	r6, #0
 800633a:	4630      	mov	r0, r6
 800633c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006414 <_malloc_r+0xfc>
 8006344:	f000 f868 	bl	8006418 <__malloc_lock>
 8006348:	f8d8 3000 	ldr.w	r3, [r8]
 800634c:	461c      	mov	r4, r3
 800634e:	bb5c      	cbnz	r4, 80063a8 <_malloc_r+0x90>
 8006350:	4629      	mov	r1, r5
 8006352:	4638      	mov	r0, r7
 8006354:	f7ff ffc0 	bl	80062d8 <sbrk_aligned>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	4604      	mov	r4, r0
 800635c:	d155      	bne.n	800640a <_malloc_r+0xf2>
 800635e:	f8d8 4000 	ldr.w	r4, [r8]
 8006362:	4626      	mov	r6, r4
 8006364:	2e00      	cmp	r6, #0
 8006366:	d145      	bne.n	80063f4 <_malloc_r+0xdc>
 8006368:	2c00      	cmp	r4, #0
 800636a:	d048      	beq.n	80063fe <_malloc_r+0xe6>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	4631      	mov	r1, r6
 8006370:	4638      	mov	r0, r7
 8006372:	eb04 0903 	add.w	r9, r4, r3
 8006376:	f000 f98d 	bl	8006694 <_sbrk_r>
 800637a:	4581      	cmp	r9, r0
 800637c:	d13f      	bne.n	80063fe <_malloc_r+0xe6>
 800637e:	6821      	ldr	r1, [r4, #0]
 8006380:	1a6d      	subs	r5, r5, r1
 8006382:	4629      	mov	r1, r5
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff ffa7 	bl	80062d8 <sbrk_aligned>
 800638a:	3001      	adds	r0, #1
 800638c:	d037      	beq.n	80063fe <_malloc_r+0xe6>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	442b      	add	r3, r5
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	f8d8 3000 	ldr.w	r3, [r8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d038      	beq.n	800640e <_malloc_r+0xf6>
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	42a2      	cmp	r2, r4
 80063a0:	d12b      	bne.n	80063fa <_malloc_r+0xe2>
 80063a2:	2200      	movs	r2, #0
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e00f      	b.n	80063c8 <_malloc_r+0xb0>
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	1b52      	subs	r2, r2, r5
 80063ac:	d41f      	bmi.n	80063ee <_malloc_r+0xd6>
 80063ae:	2a0b      	cmp	r2, #11
 80063b0:	d917      	bls.n	80063e2 <_malloc_r+0xca>
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	6025      	str	r5, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	6059      	strne	r1, [r3, #4]
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	bf08      	it	eq
 80063c0:	f8c8 1000 	streq.w	r1, [r8]
 80063c4:	5162      	str	r2, [r4, r5]
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	4638      	mov	r0, r7
 80063ca:	f104 060b 	add.w	r6, r4, #11
 80063ce:	f000 f829 	bl	8006424 <__malloc_unlock>
 80063d2:	f026 0607 	bic.w	r6, r6, #7
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	1af2      	subs	r2, r6, r3
 80063da:	d0ae      	beq.n	800633a <_malloc_r+0x22>
 80063dc:	1b9b      	subs	r3, r3, r6
 80063de:	50a3      	str	r3, [r4, r2]
 80063e0:	e7ab      	b.n	800633a <_malloc_r+0x22>
 80063e2:	42a3      	cmp	r3, r4
 80063e4:	6862      	ldr	r2, [r4, #4]
 80063e6:	d1dd      	bne.n	80063a4 <_malloc_r+0x8c>
 80063e8:	f8c8 2000 	str.w	r2, [r8]
 80063ec:	e7ec      	b.n	80063c8 <_malloc_r+0xb0>
 80063ee:	4623      	mov	r3, r4
 80063f0:	6864      	ldr	r4, [r4, #4]
 80063f2:	e7ac      	b.n	800634e <_malloc_r+0x36>
 80063f4:	4634      	mov	r4, r6
 80063f6:	6876      	ldr	r6, [r6, #4]
 80063f8:	e7b4      	b.n	8006364 <_malloc_r+0x4c>
 80063fa:	4613      	mov	r3, r2
 80063fc:	e7cc      	b.n	8006398 <_malloc_r+0x80>
 80063fe:	230c      	movs	r3, #12
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	4638      	mov	r0, r7
 8006404:	f000 f80e 	bl	8006424 <__malloc_unlock>
 8006408:	e797      	b.n	800633a <_malloc_r+0x22>
 800640a:	6025      	str	r5, [r4, #0]
 800640c:	e7dc      	b.n	80063c8 <_malloc_r+0xb0>
 800640e:	605b      	str	r3, [r3, #4]
 8006410:	deff      	udf	#255	; 0xff
 8006412:	bf00      	nop
 8006414:	200006e0 	.word	0x200006e0

08006418 <__malloc_lock>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__malloc_lock+0x8>)
 800641a:	f7ff bf0f 	b.w	800623c <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	200006dc 	.word	0x200006dc

08006424 <__malloc_unlock>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__malloc_unlock+0x8>)
 8006426:	f7ff bf0a 	b.w	800623e <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	200006dc 	.word	0x200006dc

08006430 <__sflush_r>:
 8006430:	898a      	ldrh	r2, [r1, #12]
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	4605      	mov	r5, r0
 8006438:	0710      	lsls	r0, r2, #28
 800643a:	460c      	mov	r4, r1
 800643c:	d458      	bmi.n	80064f0 <__sflush_r+0xc0>
 800643e:	684b      	ldr	r3, [r1, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc05      	bgt.n	8006450 <__sflush_r+0x20>
 8006444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	dc02      	bgt.n	8006450 <__sflush_r+0x20>
 800644a:	2000      	movs	r0, #0
 800644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006452:	2e00      	cmp	r6, #0
 8006454:	d0f9      	beq.n	800644a <__sflush_r+0x1a>
 8006456:	2300      	movs	r3, #0
 8006458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800645c:	682f      	ldr	r7, [r5, #0]
 800645e:	6a21      	ldr	r1, [r4, #32]
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	d032      	beq.n	80064ca <__sflush_r+0x9a>
 8006464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	075a      	lsls	r2, r3, #29
 800646a:	d505      	bpl.n	8006478 <__sflush_r+0x48>
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006472:	b10b      	cbz	r3, 8006478 <__sflush_r+0x48>
 8006474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006476:	1ac0      	subs	r0, r0, r3
 8006478:	2300      	movs	r3, #0
 800647a:	4602      	mov	r2, r0
 800647c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800647e:	6a21      	ldr	r1, [r4, #32]
 8006480:	4628      	mov	r0, r5
 8006482:	47b0      	blx	r6
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	d106      	bne.n	8006498 <__sflush_r+0x68>
 800648a:	6829      	ldr	r1, [r5, #0]
 800648c:	291d      	cmp	r1, #29
 800648e:	d82b      	bhi.n	80064e8 <__sflush_r+0xb8>
 8006490:	4a29      	ldr	r2, [pc, #164]	; (8006538 <__sflush_r+0x108>)
 8006492:	410a      	asrs	r2, r1
 8006494:	07d6      	lsls	r6, r2, #31
 8006496:	d427      	bmi.n	80064e8 <__sflush_r+0xb8>
 8006498:	2200      	movs	r2, #0
 800649a:	6062      	str	r2, [r4, #4]
 800649c:	04d9      	lsls	r1, r3, #19
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	6022      	str	r2, [r4, #0]
 80064a2:	d504      	bpl.n	80064ae <__sflush_r+0x7e>
 80064a4:	1c42      	adds	r2, r0, #1
 80064a6:	d101      	bne.n	80064ac <__sflush_r+0x7c>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b903      	cbnz	r3, 80064ae <__sflush_r+0x7e>
 80064ac:	6560      	str	r0, [r4, #84]	; 0x54
 80064ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064b0:	602f      	str	r7, [r5, #0]
 80064b2:	2900      	cmp	r1, #0
 80064b4:	d0c9      	beq.n	800644a <__sflush_r+0x1a>
 80064b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ba:	4299      	cmp	r1, r3
 80064bc:	d002      	beq.n	80064c4 <__sflush_r+0x94>
 80064be:	4628      	mov	r0, r5
 80064c0:	f7ff febe 	bl	8006240 <_free_r>
 80064c4:	2000      	movs	r0, #0
 80064c6:	6360      	str	r0, [r4, #52]	; 0x34
 80064c8:	e7c0      	b.n	800644c <__sflush_r+0x1c>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b0      	blx	r6
 80064d0:	1c41      	adds	r1, r0, #1
 80064d2:	d1c8      	bne.n	8006466 <__sflush_r+0x36>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0c5      	beq.n	8006466 <__sflush_r+0x36>
 80064da:	2b1d      	cmp	r3, #29
 80064dc:	d001      	beq.n	80064e2 <__sflush_r+0xb2>
 80064de:	2b16      	cmp	r3, #22
 80064e0:	d101      	bne.n	80064e6 <__sflush_r+0xb6>
 80064e2:	602f      	str	r7, [r5, #0]
 80064e4:	e7b1      	b.n	800644a <__sflush_r+0x1a>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	e7ad      	b.n	800644c <__sflush_r+0x1c>
 80064f0:	690f      	ldr	r7, [r1, #16]
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	d0a9      	beq.n	800644a <__sflush_r+0x1a>
 80064f6:	0793      	lsls	r3, r2, #30
 80064f8:	680e      	ldr	r6, [r1, #0]
 80064fa:	bf08      	it	eq
 80064fc:	694b      	ldreq	r3, [r1, #20]
 80064fe:	600f      	str	r7, [r1, #0]
 8006500:	bf18      	it	ne
 8006502:	2300      	movne	r3, #0
 8006504:	eba6 0807 	sub.w	r8, r6, r7
 8006508:	608b      	str	r3, [r1, #8]
 800650a:	f1b8 0f00 	cmp.w	r8, #0
 800650e:	dd9c      	ble.n	800644a <__sflush_r+0x1a>
 8006510:	6a21      	ldr	r1, [r4, #32]
 8006512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006514:	4643      	mov	r3, r8
 8006516:	463a      	mov	r2, r7
 8006518:	4628      	mov	r0, r5
 800651a:	47b0      	blx	r6
 800651c:	2800      	cmp	r0, #0
 800651e:	dc06      	bgt.n	800652e <__sflush_r+0xfe>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e78e      	b.n	800644c <__sflush_r+0x1c>
 800652e:	4407      	add	r7, r0
 8006530:	eba8 0800 	sub.w	r8, r8, r0
 8006534:	e7e9      	b.n	800650a <__sflush_r+0xda>
 8006536:	bf00      	nop
 8006538:	dfbffffe 	.word	0xdfbffffe

0800653c <_fflush_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	4605      	mov	r5, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b913      	cbnz	r3, 800654c <_fflush_r+0x10>
 8006546:	2500      	movs	r5, #0
 8006548:	4628      	mov	r0, r5
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	b118      	cbz	r0, 8006556 <_fflush_r+0x1a>
 800654e:	6a03      	ldr	r3, [r0, #32]
 8006550:	b90b      	cbnz	r3, 8006556 <_fflush_r+0x1a>
 8006552:	f7ff fc81 	bl	8005e58 <__sinit>
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f3      	beq.n	8006546 <_fflush_r+0xa>
 800655e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d404      	bmi.n	800656e <_fflush_r+0x32>
 8006564:	0599      	lsls	r1, r3, #22
 8006566:	d402      	bmi.n	800656e <_fflush_r+0x32>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f7ff fe67 	bl	800623c <__retarget_lock_acquire_recursive>
 800656e:	4628      	mov	r0, r5
 8006570:	4621      	mov	r1, r4
 8006572:	f7ff ff5d 	bl	8006430 <__sflush_r>
 8006576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006578:	07da      	lsls	r2, r3, #31
 800657a:	4605      	mov	r5, r0
 800657c:	d4e4      	bmi.n	8006548 <_fflush_r+0xc>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	d4e1      	bmi.n	8006548 <_fflush_r+0xc>
 8006584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006586:	f7ff fe5a 	bl	800623e <__retarget_lock_release_recursive>
 800658a:	e7dd      	b.n	8006548 <_fflush_r+0xc>

0800658c <__swhatbuf_r>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	2900      	cmp	r1, #0
 8006596:	b096      	sub	sp, #88	; 0x58
 8006598:	4615      	mov	r5, r2
 800659a:	461e      	mov	r6, r3
 800659c:	da0d      	bge.n	80065ba <__swhatbuf_r+0x2e>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	bf0c      	ite	eq
 80065aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065ae:	2340      	movne	r3, #64	; 0x40
 80065b0:	2000      	movs	r0, #0
 80065b2:	6031      	str	r1, [r6, #0]
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	b016      	add	sp, #88	; 0x58
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	466a      	mov	r2, sp
 80065bc:	f000 f848 	bl	8006650 <_fstat_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dbec      	blt.n	800659e <__swhatbuf_r+0x12>
 80065c4:	9901      	ldr	r1, [sp, #4]
 80065c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065ce:	4259      	negs	r1, r3
 80065d0:	4159      	adcs	r1, r3
 80065d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d6:	e7eb      	b.n	80065b0 <__swhatbuf_r+0x24>

080065d8 <__smakebuf_r>:
 80065d8:	898b      	ldrh	r3, [r1, #12]
 80065da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065dc:	079d      	lsls	r5, r3, #30
 80065de:	4606      	mov	r6, r0
 80065e0:	460c      	mov	r4, r1
 80065e2:	d507      	bpl.n	80065f4 <__smakebuf_r+0x1c>
 80065e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	6123      	str	r3, [r4, #16]
 80065ec:	2301      	movs	r3, #1
 80065ee:	6163      	str	r3, [r4, #20]
 80065f0:	b002      	add	sp, #8
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	ab01      	add	r3, sp, #4
 80065f6:	466a      	mov	r2, sp
 80065f8:	f7ff ffc8 	bl	800658c <__swhatbuf_r>
 80065fc:	9900      	ldr	r1, [sp, #0]
 80065fe:	4605      	mov	r5, r0
 8006600:	4630      	mov	r0, r6
 8006602:	f7ff fe89 	bl	8006318 <_malloc_r>
 8006606:	b948      	cbnz	r0, 800661c <__smakebuf_r+0x44>
 8006608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800660c:	059a      	lsls	r2, r3, #22
 800660e:	d4ef      	bmi.n	80065f0 <__smakebuf_r+0x18>
 8006610:	f023 0303 	bic.w	r3, r3, #3
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	e7e3      	b.n	80065e4 <__smakebuf_r+0xc>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	6020      	str	r0, [r4, #0]
 8006620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	6163      	str	r3, [r4, #20]
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	6120      	str	r0, [r4, #16]
 800662e:	b15b      	cbz	r3, 8006648 <__smakebuf_r+0x70>
 8006630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006634:	4630      	mov	r0, r6
 8006636:	f000 f81d 	bl	8006674 <_isatty_r>
 800663a:	b128      	cbz	r0, 8006648 <__smakebuf_r+0x70>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	431d      	orrs	r5, r3
 800664c:	81a5      	strh	r5, [r4, #12]
 800664e:	e7cf      	b.n	80065f0 <__smakebuf_r+0x18>

08006650 <_fstat_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d07      	ldr	r5, [pc, #28]	; (8006670 <_fstat_r+0x20>)
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	f7fa face 	bl	8000bfe <_fstat>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d102      	bne.n	800666c <_fstat_r+0x1c>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	b103      	cbz	r3, 800666c <_fstat_r+0x1c>
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	200006d8 	.word	0x200006d8

08006674 <_isatty_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d06      	ldr	r5, [pc, #24]	; (8006690 <_isatty_r+0x1c>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f7fa facd 	bl	8000c1e <_isatty>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_isatty_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_isatty_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200006d8 	.word	0x200006d8

08006694 <_sbrk_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d06      	ldr	r5, [pc, #24]	; (80066b0 <_sbrk_r+0x1c>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	f7fa fad6 	bl	8000c50 <_sbrk>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_sbrk_r+0x1a>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_sbrk_r+0x1a>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	200006d8 	.word	0x200006d8

080066b4 <_init>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr

080066c0 <_fini>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr
